declare function yyAllocate(): any;
declare function yyParticleType(): any;
declare function ParticleType_ClearClass(): any;
declare function yyEmitter(): any;
declare function Emitter_Reset(): any;
declare function yyParticle(): any;
declare function yyParticleSystem(): any;
declare function ParticleSystem_ClearClass(): any;
declare function CParticleSystem(): any;
declare function YYRandom(_v: any, ): any;
declare function MyRandom(_minval: any, _maxval: any, _distr: any, ): any;
declare function Vector_To_Direction(_h: any, _v: any, ): any;
declare function Direction_To_Vector_h(_dir: any, _sp: any, ): any;
declare function Direction_To_Vector_v(_dir: any, _sp: any, ): any;
declare function Compute_Color(_pParticle: any, ): any;
declare function CreateParticle(_x: any, _y: any, _parttype: any, ): any;
declare function ParticleType_Create(): any;
declare function ParticleType_Destroy(_ind: any, ): any;
declare function ParticleType_Clear(_ind: any, ): any;
declare function ParticleType_DestroyAll(): any;
declare function ParticleType_Exists(_ind: any, ): any;
declare function ParticleType_Shape(_ind: any, _shape: any, ): any;
declare function ParticleType_Sprite(_ind: any, _sprite: any, _anim: any, _stretch: any, _rand: any, ): any;
declare function ParticleType_Size(_ind: any, _sizemin: any, _sizemax: any, _sizeincr: any, _sizerand: any, ): any;
declare function ParticleType_Scale(_ind: any, _xscale: any, _yscale: any, ): any;
declare function ParticleType_Life(_ind: any, _lifemin: any, _lifemax: any, ): any;
declare function ParticleType_Step(_ind: any, _stepnumber: any, _steptype: any, ): any;
declare function ParticleType_Death(_ind: any, _deathnumber: any, _deathtype: any, ): any;
declare function ParticleType_Speed(_ind: any, _spmin: any, _spmax: any, _spincr: any, _sprand: any, ): any;
declare function ParticleType_Direction(_ind: any, _dirmin: any, _dirmax: any, _dirincr: any, _dirrand: any, ): any;
declare function ParticleType_Orientation(_ind: any, _angmin: any, _angmax: any, _angincr: any, _angrand: any, _angdir: any, ): any;
declare function ParticleType_Gravity(_ind: any, _grav: any, _gravdir: any, ): any;
declare function ParticleType_Colour_RGB(_ind: any, _rmin: any, _rmax: any, _gmin: any, _gmax: any, _bmin: any, _bmax: any, ): any;
declare function ParticleType_Colour_Mix(_ind: any, _col1: any, _col2: any, ): any;
declare function ParticleType_Colour_HSV(_ind: any, _hmin: any, _hmax: any, _smin: any, _smax: any, _vmin: any, _vmax: any, ): any;
declare function ParticleType_Color1(_ind: any, _colstart: any, ): any;
declare function ParticleType_Color2(_ind: any, _colstart: any, _colend: any, ): any;
declare function ParticleType_Color3(_ind: any, _colstart: any, _colmiddle: any, _colend: any, ): any;
declare function ParticleType_Alpha1(_ind: any, _alphastart: any, ): any;
declare function ParticleType_Alpha2(_ind: any, _alphastart: any, _alphaend: any, ): any;
declare function ParticleType_Alpha3(_ind: any, _alphastart: any, _alphamiddle: any, _alphaend: any, ): any;
declare function ParticleType_Blend(_ind: any, _additive: any, ): any;
declare function ParticleSystem_Emitters_Load(_GameFile: any, ): any;
declare function ParticleSystem_Emitter_Create(_ps: any, ): any;
declare function ParticleSystem_Emitter_Destroy(_ps: any, _ind: any, ): any;
declare function ParticleSystem_Emitter_DestroyAll(_ps: any, ): any;
declare function ParticleSystem_Emitter_Exists(_ps: any, _ind: any, ): any;
declare function ParticleSystem_Emitter_Clear(_ps: any, _ind: any, ): any;
declare function ParticleSystem_Emitter_Region(_ps: any, _ind: any, _xmin: any, _xmax: any, _ymin: any, _ymax: any, _shape: any, _posdistr: any, ): any;
declare function EmitParticles(_ps: any, _em: any, _x: any, _y: any, _parttype: any, _numb: any, _applyColor: any, _col: any, ): any;
declare function ParticleSystem_Emitter_Burst(_ps: any, _ind: any, _ptype: any, _numb: any, ): any;
declare function ParticleSystem_Emitter_Stream(_ps: any, _ind: any, _ptype: any, _numb: any, ): any;
declare function ParticleSystem_Particles_Create(_ps: any, _x: any, _y: any, _parttype: any, _numb: any, ): any;
declare function ParticleSystem_Particles_Create_Color(_ps: any, _x: any, _y: any, _parttype: any, _col: any, _numb: any, ): any;
declare function ParticleSystem_Particles_Clear(_ps: any, ): any;
declare function ParticleSystem_Particles_Delete(_pParticles: any, _index: any, ): any;
declare function ParticleSystem_Particles_Count(_ps: any, ): any;
declare function ParticleSystem_Create_GetLayer(_layerID: any, ): any;
declare function ParticleSystem_Create_OnLayer(_layerID: any, _persistent: any, _pPartEl: any, ): any;
declare function ParticleSystem_Create(_layerID: any, _persistent: any, ): any;
declare function ParticleSystem_Exists(_ps: any, ): any;
declare function ParticleSystem_Destroy(_ps: any, ): any;
declare function ParticleSystem_DestroyAll(): any;
declare function ParticleSystem_Clear(_ps: any, ): any;
declare function ParticleSystem_GetLayer(_ps: any, ): any;
declare function ParticleSystem_Layer(_ps: any, _layerID: any, ): any;
declare function ParticleSystem_ClearParticles(): any;
declare function ParticleSystem_DrawOrder(_ps: any, _oldtonew: any, ): any;
declare function ParticleSystem_Depth(_ps: any, _depth: any, ): any;
declare function ParticleSystem_Position(_ps: any, _x: any, _y: any, ): any;
declare function ParticleSystem_AutomaticUpdate(_ps: any, _automatic: any, ): any;
declare function ParticleSystem_AutomaticDraw(_ps: any, _automatic: any, ): any;
declare function HandleLife(_ps: any, _em: any, ): any;
declare function HandleMotion(_ps: any, _em: any, ): any;
declare function HandleShape(_ps: any, _em: any, ): any;
declare function ParticleSystem_Update(_ps: any, ): any;
declare function ParticleSystem_UpdateAll(): any;
declare function DrawParticle(_pParticle: any, _xoff: any, _yoff: any, _color: any, _alpha: any, ): any;
declare function ParticleSystem_Draw(_ps: any, _color: any, _alpha: any, ): any;
declare function ParticleSystem_DrawDepth(_d: any, ): any;
declare function ParticleSystem_AddAllToLayers(): any;
declare function ParticleSystem_RemoveAllFromLayers(): any;
declare function ParticleSystem_AutoDraw(_ps: any, ): any;
declare function ParticleSystem_LargestDepth(): any;
declare function ParticleSystem_NextDepth(_d: any, ): any;
declare function action_execute_script(): any;
declare function action_show_info(): any;
declare function action_show_video(): any;
declare function action_unknown(): any;
declare function action_path_old(): any;
declare function action_draw_font(): any;
declare function action_draw_font_old(): any;
declare function action_fill_color(): any;
declare function action_line_color(): any;
declare function action_highscore(): any;
declare function action_if_question(_arg: any, ): any;
declare function action_set_relative(rel: any, ): any;
declare function action_set_cursor(_spr: any, _show: any, ): any;
declare function action_set_sprite(_inst: any, _spr: any, _scale: any, ): any;
declare function action_set_motion(_inst: any, _dir: any, _val: any, ): any;
declare function action_set_hspeed(_inst: any, _speed: any, ): any;
declare function action_set_vspeed(_inst: any, _speed: any, ): any;
declare function action_set_gravity(_inst: any, _gdir: any, _gravity: any, ): any;
declare function action_set_friction(_inst: any, _friction: any, ): any;
declare function action_move(_inst: any, direction: any, size: any, ): any;
declare function action_move_point(_inst: any, _x: any, _y: any, _speed: any, ): any;
declare function action_move_to(_inst: any, _x: any, _y: any, ): any;
declare function action_move_start(_inst: any, ): any;
declare function action_move_random(_inst: any, _sx: any, _sy: any, ): any;
declare function action_snap(_inst: any, _hsnap: any, _vsnap: any, ): any;
declare function action_wrap(_inst: any, _wrap: any, ): any;
declare function action_reverse_xdir(_inst: any, ): any;
declare function action_reverse_ydir(_inst: any, ): any;
declare function action_move_contact(_inst: any, _dir: any, _maxdist: any, _useall: any, ): any;
declare function action_bounce(_inst: any, _adv: any, _useall: any, ): any;
declare function action_kill_object(_inst: any, ): any;
declare function action_create_object(_inst: any, _objid: any, _x: any, _y: any, ): any;
declare function action_create_object_motion(_inst: any, _objid: any, _x: any, _y: any, _speed: any, _dir: any, ): any;
declare function action_create_object_random(_inst: any, _objid0: any, _objid1: any, _objid2: any, _objid3: any, _x: any, _y: any, ): any;
declare function action_sprite_set(_inst: any, _spr: any, _subimg: any, _imgspeed: any, ): any;
declare function action_sprite_color(_inst: any, _col: any, _alpha: any, ): any;
declare function action_sound(_snd: any, _loop: any, ): any;
declare function action_set_alarm(_inst: any, _time: any, _alarm: any, ): any;
declare function action_end_game(): any;
declare function action_restart_game(): any;
declare function action_if_dice(_arg: any, ): any;
declare function action_if_variable(): any;
declare function action_draw_variable(_inst: any, _var: any, _x: any, _y: any, ): any;
declare function action_set_score(_score: any, ): any;
declare function action_if_score(): any;
declare function action_draw_score(_inst: any, _x: any, _y: any, _score_str: any, ): any;
declare function action_set_life(_lives: any, ): any;
declare function action_if_life(): any;
declare function action_draw_life(_inst: any, _x: any, _y: any, _life_str: any, ): any;
declare function action_draw_life_images(_inst: any, _x: any, _y: any, _spr: any, ): any;
declare function action_set_health(_inst: any, _health: any, ): any;
declare function action_if_health(_inst: any, _value: any, _op: any, ): any;
declare function action_set_caption(_show_score_caption: any, _score_caption: any, _show_lives_caption: any, _lives_caption: any, _show_health_caption: any, _health_caption: any, ): any;
declare function action_draw_sprite(_inst: any, _spr: any, _x: any, _y: any, _subimg: any, ): any;
declare function action_draw_background(_inst: any, _bg: any, _x: any, _y: any, _tiled: any, ): any;
declare function action_draw_text(_inst: any, _str: any, _x: any, _y: any, ): any;
declare function action_draw_text_transformed(_inst: any, _text: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, ): any;
declare function action_draw_rectangle(_inst: any, _x: any, _y: any, _x2: any, _y2: any, _outline: any, ): any;
declare function action_draw_line(_inst: any, _x: any, _y: any, _x2: any, _y2: any, ): any;
declare function action_color(_col: any, ): any;
declare function action_font(_font: any, _halign: any, ): any;
declare function action_draw_health(_inst: any, _x: any, _y: any, _x2: any, _y2: any, _col: any, _col2: any, ): any;
declare function action_another_room(_room: any, _transition: any, ): any;
declare function action_current_room(): any;
declare function action_previous_room(): any;
declare function action_next_room(): any;
declare function action_if_previous_room(): any;
declare function action_if_next_room(): any;
declare function action_partsyst_create(_depth: any, ): any;
declare function action_partsyst_destroy(): any;
declare function action_partsyst_clear(): any;
declare function action_parttype_create_old(_type: any, _shape: any, _sizeMin: any, _sizeMax: any, _colStart: any, _colEnd: any, ): any;
declare function action_parttype_create(_type: any, _shape: any, _spr: any, _sizeMin: any, _sizeMax: any, _sizeIncr: any, ): any;
declare function action_parttype_color(_type: any, _mixCol: any, _colStart: any, _colEnd: any, _alphaStart: any, _alphaEnd: any, ): any;
declare function action_parttype_life(_type: any, _lifeMin: any, _lifeMax: any, ): any;
declare function action_parttype_speed(_type: any, _speedMin: any, _speedMax: any, _dirMin: any, _dirMax: any, _speedIncr: any, ): any;
declare function action_parttype_gravity(_type: any, _gravStrength: any, _gravDir: any, ): any;
declare function action_parttype_secondary(_type: any, _stepType: any, _stepNumber: any, _deathType: any, _deathNumber: any, ): any;
declare function action_partemit_create(_emit: any, _shape: any, _xmin: any, _xmax: any, _ymin: any, _ymax: any, ): any;
declare function action_partemit_destroy(_emit: any, ): any;
declare function action_partemit_burst(_emit: any, _type: any, _number: any, ): any;
declare function action_partemit_stream(_emit: any, _type: any, _number: any, ): any;
declare function action_draw_gradient_hor(_inst: any, _x: any, _y: any, _x2: any, _y2: any, _col1: any, _col2: any, ): any;
declare function action_draw_gradient_vert(_inst: any, _x: any, _y: any, _x2: any, _y2: any, _col1: any, _col2: any, ): any;
declare function action_draw_arrow(_inst: any, _x: any, _y: any, _x2: any, _y2: any, _size: any, ): any;
declare function action_if_empty(_inst: any, _arg0: any, _arg1: any, _arg2: any, ): any;
declare function action_if_collision(_inst: any, _arg0: any, _arg1: any, _arg2: any, ): any;
declare function action_if(_arg0: any, ): any;
declare function action_if_number(_arg0: any, _arg1: any, _arg2: any, ): any;
declare function action_if_object(_inst: any, _obj: any, _x: any, _y: any, ): any;
declare function action_if_mouse(_arg0: any, ): any;
declare function action_if_aligned(_inst: any, _x: any, _y: any, ): any;
declare function action_path(_inst: any, _path: any, _speed: any, _atend: any, _relative: any, ): any;
declare function action_path_end(_inst: any, ): any;
declare function action_path_position(_inst: any, _pos: any, ): any;
declare function action_path_speed(_inst: any, _speed: any, ): any;
declare function action_linear_step(_inst: any, _x: any, _y: any, _stepsize: any, _checkall: any, ): any;
declare function action_potential_step(_inst: any, _x: any, _y: any, _stepsize: any, _checkall: any, ): any;
declare function action_inherited(_inst: any, _other: any, ): any;
declare function action_change_object(_inst: any, _newobj: any, _perform_events: any, ): any;
declare function action_kill_position(_inst: any, _x: any, _y: any, ): any;
declare function action_end_sound(_snd: any, ): any;
declare function action_if_sound(_snd: any, ): any;
declare function action_effect(_inst: any, _kind: any, _x: any, _y: any, _size: any, _col: any, _below: any, ): any;
declare function action_message(_message: any, ): any;
declare function action_sprite_transform(_inst: any, _sx: any, _sy: any, _angle: any, _dir: any, ): any;
declare function action_sleep(_sleepTime: any, _refresh: any, ): any;
declare function action_snapshot(_fname: any, ): any;
declare function action_replace_sprite(_spr: any, _fname: any, _imgNum: any, ): any;
declare function action_replace_sound(_snd: any, _fname: any, ): any;
declare function action_replace_background(_bg: any, _fname: any, ): any;
declare function action_set_timeline(_inst: any, _index: any, _pos: any, ): any;
declare function action_timeline_set(_inst: any, _index: any, _pos: any, _paused: any, _loop: any, ): any;
declare function action_set_timeline_position(_inst: any, _pos: any, ): any;
declare function action_set_timeline_speed(_inst: any, _speed: any, ): any;
declare function action_timeline_start(_inst: any, ): any;
declare function action_timeline_stop(_inst: any, ): any;
declare function action_timeline_pause(_inst: any, ): any;
declare function action_draw_ellipse(_inst: any, _x: any, _y: any, _x2: any, _y2: any, _outline: any, ): any;
declare function action_draw_ellipse_gradient(_inst: any, _x: any, _y: any, _x2: any, _y2: any, _col1: any, _col2: any, ): any;
declare function action_splash_web(_url: any, ): any;
declare function action_webpage(_url: any, ): any;
declare function action_highscore_show(_background: any, _border: any, _col1: any, _col2: any, _fontname: any, _fontsize: any, _fontstyle: any, ): any;
declare function action_highscore_clear(): any;
declare function action_fullscreen(_mode: any, ): any;
declare function action_sprite_colour(_inst: any, _col: any, _alpha: any, ): any;
declare function action_colour(_col: any, ): any;
declare function action_parttype_colour(_type: any, _mixCol: any, _colStart: any, _colEnd: any, _alphaStart: any, _alphaEnd: any, ): any;
declare function GetCurveFromRValue(_val: any, ): any;
declare function animcurve_get(_curveID: any, ): any;
declare function animcurve_get_channel_index(_curveIdOrCurveObject: any, _channelName: any, ): any;
declare function animcurve_get_channel(_curveIdOrCurveObject: any, _channelIndexOrName: any, ): any;
declare function animcurve_channel_evaluate(_curveObject: any, _value: any, ): any;
declare function animcurve_create(): any;
declare function animcurve_destroy(_curveIdOrCurveObject: any, ): any;
declare function animcurve_exists(_curveIdOrCurveObject: any, ): any;
declare function animcurve_channel_new(): any;
declare function animcurve_point_new(): any;
declare function background_exists(_resourceindex: any, ): any;
declare function background_get_name(_resourceindex: any, ): any;
declare function background_name(_resourceindex: any, ): any;
declare function background_get_width(_resourceindex: any, ): any;
declare function background_get_height(_resourceindex: any, ): any;
declare function background_create_from_screen(_x: any, _y: any, _w: any, _h: any, _removeback: any, _smooth: any, ): any;
declare function background_create_from_surface(_id: any, _x: any, _y: any, _w: any, _h: any, _removeback: any, _smooth: any, ): any;
declare function background_create_color(_w: any, _h: any, _colour: any, ): any;
declare function background_create_gradient(_w: any, _h: any, _col1: any, _col2: any, _kind: any, ): any;
declare function background_delete(_ind: any, ): any;
declare function background_duplicate(_back: any, ): any;
declare function background_assign(_dest: any, _src: any, ): any;
declare function draw_background(_back: any, _x: any, _y: any, ): any;
declare function draw_background_stretched(_back: any, _x: any, _y: any, _w: any, _h: any, ): any;
declare function draw_background_tiled(_back: any, _x: any, _y: any, ): any;
declare function draw_background_part(_back: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, ): any;
declare function draw_background_ext(_back: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, _color: any, _alpha: any, ): any;
declare function draw_background_stretched_ext(_back: any, _x: any, _y: any, _w: any, _h: any, _color: any, _alpha: any, ): any;
declare function draw_background_tiled_ext(_back: any, _x: any, _y: any, _xscale: any, _yscale: any, _color: any, _alpha: any, ): any;
declare function draw_background_part_ext(_back: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, _xscale: any, _yscale: any, _color: any, _alpha: any, ): any;
declare function draw_background_general(_back: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function background_set_alpha_from_background(_ind: any, _back: any, ): any;
declare function background_add(_filename: any, _removeback: any, _smooth: any, ): any;
declare function background_replace(_ind: any, _filename: any, _removeback: any, _smooth: any, ): any;
declare function background_get_texture(_ind: any, ): any;
declare function background_get_uvs(_ind: any, ): any;
declare function background_prefetch(_backgroundIndex: any, ): any;
declare function background_prefetch_multi(_backgroundArray: any, ): any;
declare function background_flush(_backgroundIndex: any, ): any;
declare function background_flush_multi(_backgroundArray: any, ): any;
declare function background_create_colour(_w: any, _h: any, _colour: any, ): any;
declare function disableSelection(target: any, ): any;
declare function BE_CreateButton(_x: any, _y: any, _tpe: any, _URL: any, _target: any, _params: any, ): any;
declare function clickable_add(_x: any, _y: any, _tpe: any, _URL: any, _target: any, _params: any, ): any;
declare function clickable_add_ext(_x: any, _y: any, _tpe: any, _URL: any, _target: any, _params: any, _scale: any, _alpha: any, ): any;
declare function clickable_exists(_id: any, ): any;
declare function clickable_delete(_id: any, ): any;
declare function clickable_change(_id: any, _tpe: any, _x: any, _y: any, ): any;
declare function clickable_change_ext(_id: any, _tpe: any, _x: any, _y: any, _scale: any, _alpha: any, ): any;
declare function clickable_set_style(_button: any, _styleMap: any, ): any;
declare function collision_point(_pInst: any, _x: any, _y: any, _obj: any, _prec: any, _notme: any, ): any;
declare function AppendCollisionResults(_instArray: any, _destList: any, _px: any, _py: any, ): any;
declare function collision_point_list(_pInst: any, _x: any, _y: any, _obj: any, _prec: any, _notme: any, _list: any, _ordered: any, ): any;
declare function collision_rectangle(_pInst: any, _x1: any, _y1: any, _x2: any, _y2: any, _obj: any, _prec: any, _notme: any, ): any;
declare function collision_rectangle_list(_pInst: any, _x1: any, _y1: any, _x2: any, _y2: any, _obj: any, _prec: any, _notme: any, _list: any, _ordered: any, ): any;
declare function collision_circle(_pInst: any, _xc: any, _yc: any, _radius: any, _obj: any, _prec: any, _notme: any, ): any;
declare function collision_circle_list(_pInst: any, _xc: any, _yc: any, _radius: any, _obj: any, _prec: any, _notme: any, _list: any, _ordered: any, ): any;
declare function collision_ellipse(_pInst: any, _x1: any, _y1: any, _x2: any, _y2: any, _obj: any, _prec: any, _notme: any, ): any;
declare function collision_ellipse_list(_pInst: any, _x1: any, _y1: any, _x2: any, _y2: any, _obj: any, _prec: any, _notme: any, _list: any, _ordered: any, ): any;
declare function collision_line(_pInst: any, _x1: any, _y1: any, _x2: any, _y2: any, _obj: any, _prec: any, _notme: any, ): any;
declare function collision_line_list(_pInst: any, _x1: any, _y1: any, _x2: any, _y2: any, _obj: any, _prec: any, _notme: any, _list: any, _ordered: any, ): any;
declare function point_in_rectangle(_px: any, _py: any, _x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function rectangle_in_rectangle(_px1: any, _py1: any, _px2: any, _py2: any, _x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function PointInTriangle(px: any, py: any, x1: any, y1: any, x2: any, y2: any, x3: any, y3: any, ): any;
declare function point_in_triangle(_px: any, _py: any, _x1: any, _y1: any, _x2: any, _y2: any, _x3: any, _y3: any, ): any;
declare function PointInCircle(_px: any, _py: any, _cx: any, _cy: any, _rad_squared: any, ): any;
declare function point_in_circle(_px: any, _py: any, _cx: any, _cy: any, _rad: any, ): any;
declare function rectangle_in_circle(_sx1: any, _sy1: any, _sx2: any, _sy2: any, _cx: any, _cy: any, _rad: any, ): any;
declare function circle_in_rectangle(_sx1: any, _sy1: any, _sx2: any, _sy2: any, _cx: any, _cy: any, _rad: any, ): any;
declare function get_axis(p0: any, p1: any, ): any;
declare function project_pts(pts: any, num: any, axis: any, ): any;
declare function rectangle_in_triangle(_sx1: any, _sy1: any, _sx2: any, _sy2: any, _x1: any, _y1: any, _x2: any, _y2: any, _x3: any, _y3: any, ): any;
declare function d3d_start(): any;
declare function d3d_end(): any;
declare function d3d_set_hidden(enable: any, ): any;
declare function d3d_set_culling(cull: any, ): any;
declare function d3d_set_shading(smooth: any, ): any;
declare function d3d_set_zwriteenable(on_off: any, ): any;
declare function d3d_set_depth(depth: any, ): any;
declare function draw_set_color_write_enable(red: any, green: any, blue: any, alpha: any, ): any;
declare function d3d_set_lighting(enable: any, ): any;
declare function d3d_light_define_direction(ind: any, dx: any, dy: any, dz: any, col: any, ): any;
declare function d3d_light_define_point(ind: any, x: any, y: any, z: any, range: any, col: any, ): any;
declare function d3d_light_enable(ind: any, enable: any, ): any;
declare function d3d_light_define_ambient(colour: any, ): any;
declare function d3d_set_fog(enable: any, color: any, start: any, end: any, ): any;
declare function d3d_light_get(index: any, ): any;
declare function d3d_light_get_ambient(index: any, ): any;
declare function d3d_get_lighting(): any;
declare function d3d_draw_floor(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrepeat: any, vrepeat: any, ): any;
declare function d3d_draw_ellipsoid(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrepeat: any, vrepeat: any, steps: any, ): any;
declare function d3d_draw_block(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrepeat: any, vrepeat: any, ): any;
declare function d3d_draw_cylinder(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrepeat: any, vrepeat: any, closed: any, steps: any, ): any;
declare function d3d_draw_cone(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrepeat: any, vrepeat: any, closed: any, steps: any, ): any;
declare function d3d_draw_wall(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrepeat: any, vrepeat: any, ): any;
declare function d3d_model_create(): any;
declare function d3d_model_destroy(ind: any, ): any;
declare function d3d_model_clear(ind: any, ): any;
declare function d3d_model_save(ind: any, fname: any, ): any;
declare function d3d_model_load(ind: any, fname: any, ): any;
declare function d3d_model_save_buffer(ind: any, fname: any, ): any;
declare function d3d_model_load_buffer(ind: any, fname: any, ): any;
declare function d3d_model_draw(ind: any, x: any, y: any, z: any, texid: any, ): any;
declare function d3d_model_primitive_begin(ind: any, kind: any, ): any;
declare function d3d_model_vertex(ind: any, x: any, y: any, z: any, ): any;
declare function d3d_model_vertex_colour(ind: any, x: any, y: any, z: any, col: any, alpha: any, ): any;
declare function d3d_model_vertex_color(ind: any, x: any, y: any, z: any, col: any, alpha: any, ): any;
declare function d3d_model_vertex_texture(ind: any, x: any, y: any, z: any, xtex: any, ytex: any, ): any;
declare function d3d_model_vertex_texture_colour(ind: any, x: any, y: any, z: any, xtex: any, ytex: any, col: any, alpha: any, ): any;
declare function d3d_model_vertex_texture_color(ind: any, x: any, y: any, z: any, xtex: any, ytex: any, col: any, alpha: any, ): any;
declare function d3d_model_vertex_normal(ind: any, x: any, y: any, z: any, nx: any, ny: any, nz: any, ): any;
declare function d3d_model_vertex_normal_color(ind: any, x: any, y: any, z: any, nx: any, ny: any, nz: any, col: any, alpha: any, ): any;
declare function d3d_model_vertex_normal_texture(ind: any, x: any, y: any, z: any, nx: any, ny: any, nz: any, xtex: any, ytex: any, ): any;
declare function d3d_model_vertex_normal_texture_color(ind: any, x: any, y: any, z: any, nx: any, ny: any, nz: any, xtex: any, ytex: any, col: any, alpha: any, ): any;
declare function d3d_model_vertex_normal_texture_colour(ind: any, x: any, y: any, z: any, nx: any, ny: any, nz: any, xtex: any, ytex: any, col: any, alpha: any, ): any;
declare function d3d_model_primitive_end(ind: any, ): any;
declare function d3d_model_block(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, ): any;
declare function d3d_model_cylinder(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, closed: any, steps: any, ): any;
declare function d3d_model_cone(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, closed: any, steps: any, ): any;
declare function d3d_model_ellipsoid(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, steps: any, ): any;
declare function d3d_model_wall(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, ): any;
declare function d3d_model_floor(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, ): any;
declare function d3d_set_perspective(enable: any, ): any;
declare function d3d_set_projection(xfrom: any, yfrom: any, zfrom: any, xto: any, yto: any, zto: any, xup: any, yup: any, zup: any, ): any;
declare function d3d_set_projection_ext(xfrom: any, yfrom: any, zfrom: any, xto: any, yto: any, zto: any, xup: any, yup: any, zup: any, angle: any, aspect: any, zn: any, zf: any, ): any;
declare function d3d_set_projection_ortho(x: any, y: any, w: any, h: any, angle: any, ): any;
declare function d3d_set_projection_perspective(x: any, y: any, w: any, h: any, angle: any, ): any;
declare function d3d_transform_set_identity(): any;
declare function d3d_transform_set_translation(xt: any, yt: any, zt: any, ): any;
declare function d3d_transform_set_scaling(xs: any, ys: any, zs: any, ): any;
declare function d3d_transform_set_rotation_x(angle: any, ): any;
declare function d3d_transform_set_rotation_y(angle: any, ): any;
declare function d3d_transform_set_rotation_z(angle: any, ): any;
declare function d3d_transform_set_rotation_axis(xa: any, ya: any, za: any, angle: any, ): any;
declare function d3d_transform_add_translation(xt: any, yt: any, zt: any, ): any;
declare function d3d_transform_add_scaling(xs: any, ys: any, zs: any, ): any;
declare function d3d_transform_add_rotation_x(angle: any, ): any;
declare function d3d_transform_add_rotation_y(angle: any, ): any;
declare function d3d_transform_add_rotation_z(angle: any, ): any;
declare function d3d_transform_add_rotation_axis(xa: any, ya: any, za: any, angle: any, ): any;
declare function d3d_transform_vertex(_x: any, _y: any, _z: any, ): any;
declare function matrix_get(_type: any, ): any;
declare function matrix_set(_type: any, _matrix: any, ): any;
declare function d3d_transform_stack_clear(): any;
declare function d3d_transform_stack_empty(): any;
declare function d3d_transform_stack_push(): any;
declare function d3d_transform_stack_pop(): any;
declare function d3d_transform_stack_top(): any;
declare function d3d_transform_stack_discard(): any;
declare function gpu_set_blendenable(enable: any, ): any;
declare function gpu_set_ztestenable(enable: any, ): any;
declare function gpu_set_zfunc(cmp_func: any, ): any;
declare function gpu_set_zwriteenable(enable: any, ): any;
declare function gpu_set_fog(enable: any, col: any, start: any, end: any, ): any;
declare function gpu_set_cullmode(cullmode: any, ): any;
declare function gpu_set_blendmode(mode: any, ): any;
declare function gpu_set_blendmode_ext(src: any, dest: any, ): any;
declare function gpu_set_blendmode_ext_sepalpha(src: any, dest: any, srcalpha: any, destalpha: any, ): any;
declare function gpu_set_colorwriteenable(red: any, green: any, blue: any, alpha: any, ): any;
declare function gpu_set_colourwriteenable(red: any, green: any, blue: any, alpha: any, ): any;
declare function gpu_set_alphatestenable(enable: any, ): any;
declare function gpu_set_alphatestref(value: any, ): any;
declare function gpu_set_texfilter(linear: any, ): any;
declare function gpu_set_texfilter_ext(sampler_id: any, linear: any, ): any;
declare function gpu_set_texrepeat(repeat: any, ): any;
declare function gpu_set_texrepeat_ext(sampler_id: any, repeat: any, ): any;
declare function gpu_set_tex_filter(linear: any, ): any;
declare function gpu_set_tex_filter_ext(sampler_id: any, linear: any, ): any;
declare function gpu_set_tex_repeat(repeat: any, ): any;
declare function gpu_set_tex_repeat_ext(sampler_id: any, repeat: any, ): any;
declare function gpu_set_tex_mip_filter(filter: any, ): any;
declare function gpu_set_tex_mip_filter_ext(sampler_id: any, filter: any, ): any;
declare function gpu_set_tex_mip_bias(bias: any, ): any;
declare function gpu_set_tex_mip_bias_ext(sampler_id: any, bias: any, ): any;
declare function gpu_set_tex_min_mip(minmip: any, ): any;
declare function gpu_set_tex_min_mip_ext(sampler_id: any, minmip: any, ): any;
declare function gpu_set_tex_max_mip(maxmip: any, ): any;
declare function gpu_set_tex_max_mip_ext(sampler_id: any, maxmip: any, ): any;
declare function gpu_set_tex_max_aniso(maxaniso: any, ): any;
declare function gpu_set_tex_max_aniso_ext(sampler_id: any, maxaniso: any, ): any;
declare function gpu_set_tex_mip_enable(setting: any, ): any;
declare function gpu_set_tex_mip_enable_ext(sampler_id: any, setting: any, ): any;
declare function gpu_get_blendenable(): any;
declare function gpu_get_ztestenable(): any;
declare function gpu_get_zfunc(): any;
declare function gpu_get_zwriteenable(): any;
declare function gpu_get_fog(): any;
declare function gpu_get_cullmode(): any;
declare function gpu_get_blendmode(): any;
declare function gpu_get_blendmode_ext(): any;
declare function gpu_get_blendmode_ext_sepalpha(): any;
declare function gpu_get_blendmode_src(): any;
declare function gpu_get_blendmode_dest(): any;
declare function gpu_get_blendmode_srcalpha(): any;
declare function gpu_get_blendmode_destalpha(): any;
declare function gpu_get_colorwriteenable(): any;
declare function gpu_get_colourwriteenable(): any;
declare function gpu_get_alphatestenable(): any;
declare function gpu_get_alphatestref(): any;
declare function gpu_get_texfilter(): any;
declare function gpu_get_texfilter_ext(sampler_id: any, ): any;
declare function gpu_get_texrepeat(): any;
declare function gpu_get_texrepeat_ext(sampler_id: any, ): any;
declare function gpu_get_tex_filter(): any;
declare function gpu_get_tex_filter_ext(sampler_id: any, ): any;
declare function gpu_get_tex_repeat(): any;
declare function gpu_get_tex_repeat_ext(sampler_id: any, ): any;
declare function gpu_get_tex_mip_filter(): any;
declare function gpu_get_tex_mip_filter_ext(sampler_id: any, ): any;
declare function gpu_get_tex_mip_bias(): any;
declare function gpu_get_tex_mip_bias_ext(sampler_id: any, ): any;
declare function gpu_get_tex_min_mip(): any;
declare function gpu_get_tex_min_mip_ext(sampler_id: any, ): any;
declare function gpu_get_tex_max_mip(): any;
declare function gpu_get_tex_max_mip_ext(sampler_id: any, ): any;
declare function gpu_get_tex_max_aniso(): any;
declare function gpu_get_tex_max_aniso_ext(sampler_id: any, ): any;
declare function gpu_get_tex_mip_enable(): any;
declare function gpu_get_tex_mip_enable_ext(sampler_id: any, ): any;
declare function gpu_push_state(): any;
declare function gpu_pop_state(): any;
declare function gpu_get_state(): any;
declare function gpu_set_state(map: any, ): any;
declare function InitD3DFunctions(): any;
declare function WebGL_d3d_start_RELEASE(): any;
declare function WebGL_d3d_end_RELEASE(): any;
declare function WebGL_d3d_set_culling_RELEASE(_cull: any, ): any;
declare function WebGL_d3d_set_shading_RELEASE(_smooth: any, ): any;
declare function WebGL_d3d_set_zwriteenable_RELEASE(_onoff: any, ): any;
declare function WebGL_d3d_set_depth_RELEASE(_newdepth: any, ): any;
declare function WebGL_d3d_set_hidden_RELEASE(_hidden: any, ): any;
declare function WebGL_draw_set_color_write_enable_RELEASE(red: any, green: any, blue: any, alpha: any, ): any;
declare function WebGL_d3d_set_perspective_RELEASE(_enable: any, ): any;
declare function WebGL_d3d_set_lighting_RELEASE(_enable: any, ): any;
declare function WebGL_d3d_get_lighting_RELEASE(): any;
declare function WebGL_d3d_set_projection_RELEASE(xfrom: any, yfrom: any, zfrom: any, xto: any, yto: any, zto: any, xup: any, yup: any, zup: any, ): any;
declare function WebGL_d3d_set_projection_ext_RELEASE(xfrom: any, yfrom: any, zfrom: any, xto: any, yto: any, zto: any, xup: any, yup: any, zup: any, angle: any, aspect: any, znear: any, zfar: any, ): any;
declare function WebGL_d3d_set_projection_ortho_RELEASE(x: any, y: any, w: any, h: any, angle: any, ): any;
declare function WebGL_d3d_set_projection_perspective_RELEASE(x: any, y: any, w: any, h: any, angle: any, ): any;
declare function WebGL_d3d_draw_floor_RELEASE(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrepeat: any, vrepeat: any, ): any;
declare function WebGL_d3d_draw_ellipsoid_RELEASE(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrep: any, vrep: any, steps: any, ): any;
declare function WebGL_d3d_draw_block_RELEASE(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrep: any, vrep: any, ): any;
declare function WebGL_d3d_draw_cylinder_RELEASE(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrep: any, vrep: any, closed: any, steps: any, ): any;
declare function WebGL_d3d_draw_cone_RELEASE(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrep: any, vrep: any, closed: any, steps: any, ): any;
declare function WebGL_d3d_draw_wall_RELEASE(x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, texid: any, hrep: any, vrep: any, ): any;
declare function WebGL_d3d_light_define_direction_RELEASE(ind: any, dx: any, dy: any, dz: any, col: any, ): any;
declare function WebGL_d3d_light_get_ambient_RELEASE(): any;
declare function WebGL_d3d_light_get_RELEASE(index: any, ): any;
declare function WebGL_d3d_light_define_point_RELEASE(ind: any, x: any, y: any, z: any, range: any, col: any, ): any;
declare function WebGL_d3d_light_enable_RELEASE(ind: any, enable: any, ): any;
declare function WebGL_d3d_light_define_ambient_RELEASE(colour: any, ): any;
declare function WebGL_d3d_set_fog_RELEASE(enable: any, colour: any, start: any, end: any, ): any;
declare function WebGL_d3d_model_create_RELEASE(): any;
declare function WebGL_d3d_model_destroy_RELEASE(ind: any, ): any;
declare function WebGL_d3d_model_clear_RELEASE(ind: any, ): any;
declare function WebGL_d3d_model_save_RELEASE(ind: any, fname: any, ): any;
declare function WebGL_d3d_model_save_buffer_RELEASE(ind: any, buffer_index: any, ): any;
declare function WebGL_d3d_model_load_RELEASE(ind: any, fname: any, ): any;
declare function WebGL_d3d_model_load_buffer_RELEASE(ind: any, buffer_index: any, ): any;
declare function WebGL_d3d_model_draw_RELEASE(ind: any, x: any, y: any, z: any, texid: any, ): any;
declare function WebGL_d3d_model_primitive_begin_RELEASE(ind: any, kind: any, ): any;
declare function WebGL_d3d_model_vertex_RELEASE(ind: any, x: any, y: any, z: any, ): any;
declare function WebGL_d3d_model_vertex_color_RELEASE(ind: any, x: any, y: any, z: any, col: any, alpha: any, ): any;
declare function WebGL_d3d_model_vertex_texture_RELEASE(ind: any, x: any, y: any, z: any, xtex: any, ytex: any, ): any;
declare function WebGL_d3d_model_vertex_texture_color_RELEASE(ind: any, x: any, y: any, z: any, xtex: any, ytex: any, col: any, alpha: any, ): any;
declare function WebGL_d3d_model_vertex_normal_RELEASE(ind: any, x: any, y: any, z: any, nx: any, ny: any, nz: any, ): any;
declare function WebGL_d3d_model_vertex_normal_color_RELEASE(ind: any, x: any, y: any, z: any, nx: any, ny: any, nz: any, col: any, alpha: any, ): any;
declare function WebGL_d3d_model_vertex_normal_texture_RELEASE(ind: any, x: any, y: any, z: any, nx: any, ny: any, nz: any, xtex: any, ytex: any, ): any;
declare function WebGL_d3d_model_vertex_normal_texture_color_RELEASE(ind: any, x: any, y: any, z: any, nx: any, ny: any, nz: any, xtex: any, ytex: any, col: any, alpha: any, ): any;
declare function WebGL_d3d_model_primitive_end_RELEASE(ind: any, ): any;
declare function WebGL_d3d_model_block_RELEASE(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, ): any;
declare function WebGL_d3d_model_cylinder_RELEASE(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, closed: any, steps: any, ): any;
declare function WebGL_d3d_model_cone_RELEASE(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, closed: any, steps: any, ): any;
declare function WebGL_d3d_model_ellipsoid_RELEASE(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, steps: any, ): any;
declare function WebGL_d3d_model_wall_RELEASE(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, ): any;
declare function WebGL_d3d_model_floor_RELEASE(ind: any, x1: any, y1: any, z1: any, x2: any, y2: any, z2: any, hrepeat: any, vrepeat: any, ): any;
declare function WebGL_d3d_transform_set_identity_RELEASE(): any;
declare function WebGL_d3d_transform_set_translation_RELEASE(xt: any, yt: any, zt: any, ): any;
declare function WebGL_d3d_transform_set_scaling_RELEASE(xs: any, ys: any, zs: any, ): any;
declare function WebGL_d3d_transform_set_rotation_x_RELEASE(angle: any, ): any;
declare function WebGL_d3d_transform_set_rotation_y_RELEASE(angle: any, ): any;
declare function WebGL_d3d_transform_set_rotation_z_RELEASE(angle: any, ): any;
declare function WebGL_d3d_transform_set_rotation_axis_RELEASE(xa: any, ya: any, za: any, angle: any, ): any;
declare function WebGL_d3d_transform_add_translation_RELEASE(xt: any, yt: any, zt: any, ): any;
declare function WebGL_d3d_transform_add_scaling_RELEASE(xs: any, ys: any, zs: any, ): any;
declare function WebGL_d3d_transform_add_rotation_x_RELEASE(angle: any, ): any;
declare function WebGL_d3d_transform_add_rotation_y_RELEASE(angle: any, ): any;
declare function WebGL_d3d_transform_add_rotation_z_RELEASE(angle: any, ): any;
declare function WebGL_d3d_transform_add_rotation_axis_RELEASE(xa: any, ya: any, za: any, angle: any, ): any;
declare function WebGL_d3d_transform_vertex_RELEASE(_x: any, _y: any, _z: any, ): any;
declare function WebGL_d3d_transform_stack_clear_RELEASE(): any;
declare function WebGL_d3d_transform_stack_empty_RELEASE(): any;
declare function WebGL_d3d_transform_stack_push_RELEASE(): any;
declare function WebGL_d3d_transform_stack_pop_RELEASE(): any;
declare function WebGL_d3d_transform_stack_top_RELEASE(): any;
declare function WebGL_d3d_transform_stack_discard_RELEASE(): any;
declare function WebGL_Matrix_Get(_type: any, ): any;
declare function WebGL_Matrix_Set(_type: any, _matrix: any, ): any;
declare function WebGL_matrix_build_identity(): any;
declare function WebGL_matrix_build_lookat(xfrom: any, yfrom: any, zfrom: any, xto: any, yto: any, zto: any, xup: any, yup: any, zup: any, ): any;
declare function WebGL_matrix_build_projection_ortho(width: any, height: any, znear: any, zfar: any, ): any;
declare function WebGL_matrix_build_projection_perspective(width: any, height: any, znear: any, zfar: any, ): any;
declare function WebGL_matrix_build_projection_perspective_fov(fov: any, aspect: any, znear: any, zfar: any, ): any;
declare function WebGL_Matrix_Build(_x: any, _y: any, _z: any, _xrot: any, _yrot: any, _zrot: any, _xscale: any, _yscale: any, _zscale: any, ): any;
declare function WebGL_Matrix_Multiply(_s1: any, _s2: any, ): any;
declare function WebGL_Matrix_Transform_Vertex(_mat: any, _x: any, _y: any, _z: any, ): any;
declare function WebGL_matrix_stack_push(_matrix: any, ): any;
declare function WebGL_matrix_stack_pop(): any;
declare function WebGL_matrix_stack_clear(): any;
declare function WebGL_matrix_stack_set(_matrix: any, ): any;
declare function WebGL_matrix_stack_top(): any;
declare function WebGL_matrix_stack_is_empty(): any;
declare function WebGL_gpu_set_blendenable(_enable: any, ): any;
declare function WebGL_gpu_set_ztestenable(_enable: any, ): any;
declare function WebGL_gpu_set_zfunc(_cmp_func: any, ): any;
declare function WebGL_gpu_set_zwriteenable(_enable: any, ): any;
declare function WebGL_gpu_set_fog(_enable: any, _col: any, _start: any, _end: any, ): any;
declare function WebGL_gpu_set_cullmode(_cullmode: any, ): any;
declare function WebGL_gpu_set_blendmode(_mode: any, ): any;
declare function WebGL_gpu_set_blendmode_ext(_src: any, _dest: any, ): any;
declare function WebGL_gpu_set_blendmode_ext_sepalpha(_src: any, _dest: any, _srcalpha: any, _destalpha: any, ): any;
declare function WebGL_gpu_set_colorwriteenable(_red: any, _green: any, _blue: any, _alpha: any, ): any;
declare function WebGL_gpu_set_colourwriteenable(_red: any, _green: any, _blue: any, _alpha: any, ): any;
declare function WebGL_gpu_set_alphatestenable(_enable: any, ): any;
declare function WebGL_gpu_set_alphatestref(_value: any, ): any;
declare function WebGL_gpu_set_texfilter(_linear: any, ): any;
declare function WebGL_gpu_set_texfilter_ext(_sampler_id: any, _linear: any, ): any;
declare function WebGL_gpu_set_texrepeat(_repeat: any, ): any;
declare function WebGL_gpu_set_texrepeat_ext(_sampler_id: any, _repeat: any, ): any;
declare function WebGL_gpu_set_tex_mip_filter(_filter: any, ): any;
declare function WebGL_gpu_set_tex_mip_filter_ext(_sampler_index: any, _filter: any, ): any;
declare function WebGL_gpu_set_tex_mip_bias(_bias: any, ): any;
declare function WebGL_gpu_set_tex_mip_bias_ext(_sampler_index: any, _bias: any, ): any;
declare function WebGL_gpu_set_tex_min_mip(_minmip: any, ): any;
declare function WebGL_gpu_set_tex_min_mip_ext(_sampler_index: any, _minmip: any, ): any;
declare function WebGL_gpu_set_tex_max_mip(_maxmip: any, ): any;
declare function WebGL_gpu_set_tex_max_mip_ext(_sampler_index: any, _maxmip: any, ): any;
declare function WebGL_gpu_set_tex_max_aniso(_maxaniso: any, ): any;
declare function WebGL_gpu_set_tex_max_aniso_ext(_sampler_index: any, _maxaniso: any, ): any;
declare function WebGL_gpu_set_tex_mip_enable(_enable: any, ): any;
declare function WebGL_gpu_set_tex_mip_enable_ext(_sampler_index: any, _enable: any, ): any;
declare function WebGL_gpu_get_blendenable(): any;
declare function WebGL_gpu_get_ztestenable(): any;
declare function WebGL_gpu_get_zfunc(): any;
declare function WebGL_gpu_get_zwriteenable(): any;
declare function WebGL_gpu_get_fog(): any;
declare function WebGL_gpu_get_cullmode(): any;
declare function WebGL_gpu_get_blendmode(): any;
declare function WebGL_gpu_get_blendmode_ext(): any;
declare function WebGL_gpu_get_blendmode_ext_sepalpha(): any;
declare function WebGL_gpu_get_blendmode_src(): any;
declare function WebGL_gpu_get_blendmode_dest(): any;
declare function WebGL_gpu_get_blendmode_srcalpha(): any;
declare function WebGL_gpu_get_blendmode_destalpha(): any;
declare function WebGL_gpu_get_colorwriteenable(): any;
declare function WebGL_gpu_get_colourwriteenable(): any;
declare function WebGL_gpu_get_alphatestenable(): any;
declare function WebGL_gpu_get_alphatestref(): any;
declare function WebGL_gpu_get_texfilter(): any;
declare function WebGL_gpu_get_texfilter_ext(_sampler_id: any, ): any;
declare function WebGL_gpu_get_texrepeat(): any;
declare function WebGL_gpu_get_texrepeat_ext(_sampler_id: any, ): any;
declare function WebGL_gpu_get_tex_mip_filter(): any;
declare function WebGL_gpu_get_tex_mip_filter_ext(_sampler_index: any, ): any;
declare function WebGL_gpu_get_tex_mip_bias(): any;
declare function WebGL_gpu_get_tex_mip_bias_ext(_sampler_index: any, ): any;
declare function WebGL_gpu_get_tex_min_mip(): any;
declare function WebGL_gpu_get_tex_min_mip_ext(_sampler_index: any, ): any;
declare function WebGL_gpu_get_tex_max_mip(): any;
declare function WebGL_gpu_get_tex_max_mip_ext(_sampler_index: any, ): any;
declare function WebGL_gpu_get_tex_max_aniso(): any;
declare function WebGL_gpu_get_tex_max_aniso_ext(_sampler_index: any, ): any;
declare function WebGL_gpu_get_tex_mip_enable(): any;
declare function WebGL_gpu_get_tex_mip_enable_ext(_sampler_index: any, ): any;
declare function WebGL_gpu_push_state(): any;
declare function WebGL_gpu_pop_state(): any;
declare function InitSaveRenderStates(): any;
declare function InitSaveSamplerStates(): any;
declare function WebGL_gpu_get_state(): any;
declare function WebGL_gpu_set_state(_map: any, ): any;
declare function WebGL_Generic_Stub(): any;
declare function draw_set_colour_write_enable(red: any, green: any, blue: any, alpha: any, ): any;
declare function matrix_build(_x: any, _y: any, _z: any, _xrot: any, _yrot: any, _zrot: any, _xscale: any, _yscale: any, _zscale: any, ): any;
declare function matrix_multiply(_s1: any, _s2: any, ): any;
declare function matrix_transform_vertex(_mat: any, _x: any, _y: any, _z: any, ): any;
declare function matrix_stack_push(_matrix: any, ): any;
declare function matrix_stack_pop(): any;
declare function matrix_stack_set(_matrix: any, ): any;
declare function matrix_stack_clear(): any;
declare function matrix_stack_top(): any;
declare function matrix_stack_is_empty(): any;
declare function matrix_build_identity(): any;
declare function matrix_build_lookat(xfrom: any, yfrom: any, zfrom: any, xto: any, yto: any, zto: any, xup: any, yup: any, zup: any, ): any;
declare function matrix_build_projection_ortho(width: any, height: any, znear: any, zfar: any, ): any;
declare function matrix_build_projection_perspective(width: any, height: any, znear: any, zfar: any, ): any;
declare function matrix_build_projection_perspective_fov(fov: any, aspect: any, znear: any, zfar: any, ): any;
declare function FromGMDateTime(_datetime: any, ): any;
declare function is_leap_year(year: any, ): any;
declare function get_month_lengths(year: any, ): any;
declare function is_valid_date_time(year: any, month: any, day: any, hour: any, minute: any, second: any, millisecond: any, ): any;
declare function date_current_datetime(): any;
declare function date_current_date(): any;
declare function date_current_time(): any;
declare function date_create_datetime(_year: any, _month: any, _day: any, _hour: any, _minute: any, _second: any, ): any;
declare function date_get_year(_time: any, ): any;
declare function date_get_month(_time: any, ): any;
declare function date_get_day(_time: any, ): any;
declare function date_get_weekday(_time: any, ): any;
declare function date_get_week(_time: any, ): any;
declare function date_get_hour(_time: any, ): any;
declare function date_get_minute(_time: any, ): any;
declare function date_get_second(_time: any, ): any;
declare function dayOfYear(_jsDate: any, ): any;
declare function date_valid_datetime(_year: any, _month: any, _day: any, _hour: any, _minute: any, _second: any, ): any;
declare function date_inc_year(_date: any, _amount: any, ): any;
declare function date_inc_month(_date: any, _amount: any, ): any;
declare function date_inc_week(_date: any, _amount: any, ): any;
declare function date_inc_day(_date: any, _amount: any, ): any;
declare function date_inc_hour(_date: any, _amount: any, ): any;
declare function date_inc_minute(_date: any, _amount: any, ): any;
declare function date_inc_second(_date: any, _amount: any, ): any;
declare function date_get_day_of_year(_time: any, ): any;
declare function date_get_hour_of_year(_time: any, ): any;
declare function date_get_minute_of_year(_time: any, ): any;
declare function date_get_second_of_year(_time: any, ): any;
declare function date_year_span(_date1: any, _date2: any, ): any;
declare function date_month_span(_date1: any, _date2: any, ): any;
declare function date_week_span(_date1: any, _date2: any, ): any;
declare function date_day_span(_date1: any, _date2: any, ): any;
declare function date_hour_span(_date1: any, _date2: any, ): any;
declare function date_minute_span(_date1: any, _date2: any, ): any;
declare function date_second_span(_date1: any, _date2: any, ): any;
declare function DST_adjustment(_date: any, ): any;
declare function date_compare_datetime(_date1: any, _date2: any, ): any;
declare function date_compare_date(_date1: any, _date2: any, ): any;
declare function date_compare_time(_date1: any, _date2: any, ): any;
declare function date_date_of(_date: any, ): any;
declare function date_time_of(_date: any, ): any;
declare function padWidth2(_number: any, ): any;
declare function date_datetime_string(_date: any, ): any;
declare function date_date_string(_date: any, ): any;
declare function date_time_string(_date: any, ): any;
declare function date_days_in_month(_date: any, ): any;
declare function date_days_in_year(_date: any, ): any;
declare function date_leap_year(_date: any, ): any;
declare function date_is_today(_date: any, ): any;
declare function date_set_timezone(_timezone: any, ): any;
declare function date_get_timezone(): any;
declare function debug(text: any, ): any;
declare function YYErrorObject(_message: any, _longMessage: any, _script: any, _line: any, _stackTrace: any, ): any;
declare function __yy__processException(_ex: any, ): any;
declare function yyError(text: any, ): any;
declare function ErrorOnce(_text: any, ): any;
declare function ErrorFunction(_text: any, ): any;
declare function ErrorNotSupported(_text: any, ): any;
declare function MissingFunction(_text: any, ): any;
declare function WarningFunction(_text: any, ): any;
declare function SplitText(_txt: any, ): any;
declare function MessageBox(_errstr: any, ): any;
declare function Error_Show_Action(_errstr: any, _serious: any, ): any;
declare function debug_event(_event: any, ): any;
declare function show_debug_message(_txt: any, ): any;
declare function show_debug_message_ext(_txt: any, _values: any, ): any;
declare function show_debug_overlay(_onOff: any, ): any;
declare function debug_get_callstack(maxDepth: any, ): any;
declare function show_message_async(_txt: any, ): any;
declare function show_message(_txt: any, ): any;
declare function show_error(_str: any, _abort: any, ): any;
declare function show_question_async(_str: any, ): any;
declare function show_question(_str: any, ): any;
declare function get_integer_async(_str: any, _def: any, ): any;
declare function get_integer(_str: any, _def: any, ): any;
declare function createLoginDialog(_dialogData: any, ): any;
declare function createInputDialog(_dialogData: any, ): any;
declare function createQuestionDialog(_dialogData: any, ): any;
declare function createMessageDialog(_dialogData: any, ): any;
declare function yyDialogData(_id: any, _type: any, _strings: any, ): any;
declare function YYDialogKick(): any;
declare function YYDialogFormatText(_strings: any, ): any;
declare function YYDialogAdd(_id: any, _type: any, _strings: any, ): any;
declare function YYDialogRemoveAndKick(_id: any, ): any;
declare function get_login_async(_default_user: any, _default_password: any, ): any;
declare function get_string_async(_str: any, _def: any, ): any;
declare function get_string(_str: any, _def: any, ): any;
declare function login_dialog_update(): any;
declare function ExtractFunctionName(_func: any, ): any;
declare function stacktrace(_error: any, ): any;
declare function getStacktraceArray(_error: any, ): any;
declare function UpdateDebugInstanceList(): any;
declare function UpdateInsanceData(): any;
declare function UpdateDebugWindow(): any;
declare function print(text: any, ): any;
declare function yyTextFile(): any;
declare function file_text_open_from_string(_filedata: any, ): any;
declare function file_text_open_read(_fname: any, ): any;
declare function file_text_close(_fileid: any, ): any;
declare function file_text_open_write(_fname: any, ): any;
declare function file_text_open_append(_fname: any, ): any;
declare function file_text_write_string(_fileid: any, _str: any, ): any;
declare function file_text_write_real(_fileid: any, _x: any, ): any;
declare function file_text_writeln(_fileid: any, ): any;
declare function file_text_read_string(_fileid: any, ): any;
declare function file_text_read_real(_fileid: any, ): any;
declare function file_text_readln(_fileid: any, ): any;
declare function file_text_eof(_fileid: any, ): any;
declare function file_text_eoln(_fileid: any, ): any;
declare function file_exists(_fname: any, ): any;
declare function file_delete(_fname: any, ): any;
declare function file_rename(_oldname: any, _newname: any, ): any;
declare function file_copy(_fname: any, _newname: any, ): any;
declare function directory_exists(_dname: any, ): any;
declare function directory_create(_dname: any, ): any;
declare function directory_destroy(_dname: any, ): any;
declare function file_find_first(_mask: any, _attr: any, ): any;
declare function file_find_next(): any;
declare function file_find_close(): any;
declare function file_attributes(_fname: any, _attr: any, ): any;
declare function filename_name(_fname: any, ): any;
declare function filename_path(_fname: any, ): any;
declare function filename_dir(_fname: any, ): any;
declare function filename_drive(_fname: any, ): any;
declare function filename_change_ext(_fname: any, _newext: any, ): any;
declare function file_bin_open(_fname: any, _mod: any, ): any;
declare function file_bin_rewrite(_fileid: any, ): any;
declare function file_bin_close(_fileid: any, ): any;
declare function file_bin_size(_fileid: any, ): any;
declare function file_bin_position(_fileid: any, ): any;
declare function file_bin_seek(_fileid: any, _pos: any, ): any;
declare function file_bin_write_byte(_fileid: any, _byte: any, ): any;
declare function file_bin_read_byte(_fileid: any, ): any;
declare function environment_get_variable(_name: any, ): any;
declare function filename_ext(_filename: any, ): any;
declare function _json_decode_value(value: any, ): any;
declare function _json_decode_array(_obj: any, ): any;
declare function _json_decode_object(_obj: any, ): any;
declare function json_decode(_string: any, ): any;
declare function _json_encode_value(value: any, ): any;
declare function _json_encode_list(_list: any, ): any;
declare function _json_encode_map(_map: any, ): any;
declare function _json_encode_array(_array: any, ): any;
declare function json_encode(_map: any, _prettify: any, ): any;
declare function _json_replacer(value: any, ): any;
declare function json_stringify(_v: any, _prettify: any, ): any;
declare function _json_reviver(_: any, value: any, ): any;
declare function json_parse(_v: any, ): any;
declare function load_csv_decode(pText: any, ): any;
declare function load_csv(_fname: any, ): any;
declare function draw_set_halign(_align: any, ): any;
declare function draw_get_halign(): any;
declare function draw_set_valign(_align: any, ): any;
declare function draw_get_valign(): any;
declare function draw_set_font(_font: any, ): any;
declare function draw_get_font(): any;
declare function draw_text(_x: any, _y: any, _text: any, ): any;
declare function draw_text_color(_x: any, _y: any, _text: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function draw_text_ext_color(_x: any, _y: any, _text: any, _sep: any, _w: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function draw_text_ext(_x: any, _y: any, _text: any, _sep: any, _w: any, ): any;
declare function draw_text_transformed(_x: any, _y: any, _text: any, _xscale: any, _yscale: any, _angle: any, ): any;
declare function draw_text_ext_transformed(_x: any, _y: any, _text: any, _sep: any, _w: any, _xscale: any, _yscale: any, _angle: any, ): any;
declare function draw_text_ext_transformed_color(_x: any, _y: any, _text: any, _sep: any, _w: any, _xscale: any, _yscale: any, _angle: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function draw_text_transformed_color(_x: any, _y: any, _text: any, _xscale: any, _yscale: any, _angle: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function string_height(_text: any, ): any;
declare function string_width(_text: any, ): any;
declare function string_width_ext(_string: any, _sep: any, _w: any, ): any;
declare function string_height_ext(_string: any, _sep: any, _w: any, ): any;
declare function font_exists(_id: any, ): any;
declare function font_get_bold(_id: any, ): any;
declare function font_get_fontname(_id: any, ): any;
declare function font_get_name(_id: any, ): any;
declare function font_get_italic(_id: any, ): any;
declare function font_get_first(_id: any, ): any;
declare function font_get_last(_id: any, ): any;
declare function font_get_size(_id: any, ): any;
declare function sys_font_add(_name: any, _size: any, _bold: any, _italic: any, _first: any, _last: any, _doadd: any, ): any;
declare function font_delete(id: any, ): any;
declare function font_enable_sdf(id: any, enable: any, ): any;
declare function font_get_sdf_enabled(id: any, ): any;
declare function font_sdf_spread(id: any, enable: any, ): any;
declare function font_get_sdf_spread(id: any, ): any;
declare function font_add(_name: any, _size: any, _bold: any, _italic: any, _first: any, _last: any, ): any;
declare function font_add_sprite(_spr: any, _first: any, _prop: any, _sep: any, ): any;
declare function font_add_sprite_ext(_spr: any, _string_map: any, _prop: any, _sep: any, ): any;
declare function font_replace_sprite(_id: any, _spr: any, _first: any, _prop: any, _sep: any, ): any;
declare function font_replace_sprite_ext(_id: any, _spr: any, _string_map: any, _prop: any, _sep: any, ): any;
declare function font_set_cache_size(_ind: any, _max: any, ): any;
declare function font_get_texture(_ind: any, ): any;
declare function font_get_uvs(_ind: any, ): any;
declare function font_get_info(_ind: any, ): any;
declare function font_add_enable_aa(): any;
declare function font_add_get_enable_aa(): any;
declare function draw_text_colour(_x: any, _y: any, _text: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function draw_text_ext_colour(_x: any, _y: any, _text: any, _sep: any, _w: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function draw_text_ext_transformed_colour(_x: any, _y: any, _text: any, _sep: any, _w: any, _xscale: any, _yscale: any, _angle: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function draw_text_transformed_colour(_x: any, _y: any, _text: any, _xscale: any, _yscale: any, _angle: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function font_name(_id: any, ): any;
declare function sleep(_time: any, ): any;
declare function scheduler_resolution_set(_val: any, ): any;
declare function scheduler_resolution_get(): any;
declare function display_set_timing_method(_method: any, ): any;
declare function display_get_timing_method(): any;
declare function yy_HiScoreContainer(_value: any, _name: any, ): any;
declare function highscore_load(): any;
declare function highscore_save(): any;
declare function draw_highscore(_x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function highscore_clear(): any;
declare function highscore_add(_str: any, _numb: any, ): any;
declare function highscore_value(_place: any, ): any;
declare function highscore_name(_place: any, ): any;
declare function Color_MergeRGB(_col1: any, _col2: any, _value: any, ): any;
declare function Color_Merge(_col1: any, _col2: any, _value: any, ): any;
declare function event_perform(_pInst: any, _pOther: any, _event: any, _subevent: any, ): any;
declare function event_perform_async(_pInst: any, _pOther: any, _event: any, _ds_map: any, ): any;
declare function event_perform_timeline(_pInst: any, _other: any, _timelineInd: any, _eventInd: any, ): any;
declare function event_perform_object(_pInst: any, _pOther: any, _obj: any, _event: any, _subevent: any, ): any;
declare function event_user(_pInst: any, _pOther: any, _subevent: any, ): any;
declare function event_inherited(_pInst: any, _pOther: any, ): any;
declare function parameter_count(): any;
declare function parameter_string(_index: any, ): any;
declare function get_language_string(): any;
declare function os_get_language(): any;
declare function os_get_region(): any;
declare function os_check_permission(): any;
declare function os_request_permission(): any;
declare function device_mouse_dbclick_enable(_enable: any, ): any;
declare function base64_encode(data: any, ): any;
declare function UTF8ToUnicode(_txt: any, ): any;
declare function base64_decode(data: any, ): any;
declare function base64_decode_unicode(data: any, ): any;
declare function md5_string_unicode(string: any, ): any;
declare function md5_string_utf8(string: any, ): any;
declare function md5_file(fname: any, ): any;
declare function os_is_network_connected(): any;
declare function os_powersave_enable(enable: any, ): any;
declare function os_lock_orientation(enable: any, ): any;
declare function analytics_event(_event: any, ): any;
declare function analytics_event_ext(_event: any, ): any;
declare function sha1_string_unicode(_string: any, ): any;
declare function sha1_string_utf8(_string: any, ): any;
declare function sha1_file(_fname: any, ): any;
declare function hex_md5(s: any, ): any;
declare function b64_md5(s: any, ): any;
declare function any_md5(s: any, e: any, ): any;
declare function hex_hmac_md5(k: any, d: any, ): any;
declare function b64_hmac_md5(k: any, d: any, ): any;
declare function any_hmac_md5(k: any, d: any, e: any, ): any;
declare function md5_vm_test(): any;
declare function rstr_md5(s: any, ): any;
declare function rstr_hmac_md5(key: any, data: any, ): any;
declare function rstr2hex(input: any, ): any;
declare function rstr2b64(input: any, ): any;
declare function rstr2any(input: any, encoding: any, ): any;
declare function str2rstr_utf8(input: any, ): any;
declare function str2rstr_utf16le(input: any, ): any;
declare function str2rstr_utf16be(input: any, ): any;
declare function rstr2binl(input: any, ): any;
declare function binl2rstr(input: any, ): any;
declare function binl_md5(x: any, len: any, ): any;
declare function md5_cmn(q: any, a: any, b: any, x: any, s: any, t: any, ): any;
declare function md5_ff(a: any, b: any, c: any, d: any, x: any, s: any, t: any, ): any;
declare function md5_gg(a: any, b: any, c: any, d: any, x: any, s: any, t: any, ): any;
declare function md5_hh(a: any, b: any, c: any, d: any, x: any, s: any, t: any, ): any;
declare function md5_ii(a: any, b: any, c: any, d: any, x: any, s: any, t: any, ): any;
declare function safe_add(x: any, y: any, ): any;
declare function bit_rol(num: any, cnt: any, ): any;
declare function hex_sha1(s: any, ): any;
declare function b64_sha1(s: any, ): any;
declare function any_sha1(s: any, e: any, ): any;
declare function hex_hmac_sha1(k: any, d: any, ): any;
declare function b64_hmac_sha1(k: any, d: any, ): any;
declare function any_hmac_sha1(k: any, d: any, e: any, ): any;
declare function sha1_vm_test(): any;
declare function rstr_sha1(s: any, ): any;
declare function rstr_hmac_sha1(key: any, data: any, ): any;
declare function rstr2binb(input: any, ): any;
declare function binb2rstr(input: any, ): any;
declare function binb_sha1(x: any, len: any, ): any;
declare function sha1_ft(t: any, b: any, c: any, d: any, ): any;
declare function sha1_kt(t: any, ): any;
declare function Resource_Find(_name: any, _array: any, ): any;
declare function Resource_Find_Script(_name: any, _array: any, ): any;
declare function ResourceGetTypeIndex(_name: any, ): any;
declare function ResourceGetName(_index: any, _assetType: any, ): any;
declare function asset_get_index(_name: any, ): any;
declare function asset_get_type(_name: any, ): any;
declare function alarm_get(inst: any, index: any, ): any;
declare function alarm_set(inst: any, index: any, count: any, ): any;
declare function game_set_speed(arg0: any, arg1: any, ): any;
declare function game_get_speed(arg0: any, ): any;
declare function CTimingSource(): any;
declare function gamepad_is_supported(): any;
declare function gamepad_get_device_count(): any;
declare function gamepad_is_connected(_device: any, ): any;
declare function gamepad_get_button_threshold(_device: any, ): any;
declare function gamepad_set_button_threshold(_device: any, _threshold: any, ): any;
declare function gamepad_get_axis_deadzone(_device: any, ): any;
declare function gamepad_set_axis_deadzone(_device: any, _deadzone: any, ): any;
declare function gamepad_get_description(_device: any, ): any;
declare function gamepad_button_count(_device: any, ): any;
declare function gamepad_button_check(_device: any, _buttonIndex: any, ): any;
declare function gamepad_button_check_pressed(_device: any, _buttonIndex: any, ): any;
declare function gamepad_button_check_released(_device: any, _buttonIndex: any, ): any;
declare function gamepad_button_value(_device: any, _buttonIndex: any, ): any;
declare function gamepad_axis_count(_device: any, ): any;
declare function gamepad_axis_value(_device: any, _axisIndex: any, ): any;
declare function gamepad_set_vibration(_device: any, _leftMotor: any, _rightMotor: any, ): any;
declare function gamepad_set_color(_device: any, _color: any, ): any;
declare function gamepad_set_colour(_device: any, _colour: any, ): any;
declare function gamepad_hat_count(_device: any, ): any;
declare function gamepad_hat_value(_device: any, _index: any, ): any;
declare function gamepad_remove_mapping(_device: any, ): any;
declare function gamepad_test_mapping(_device: any, _mapping: any, ): any;
declare function gamepad_get_mapping(_device: any, ): any;
declare function gamepad_get_guid(_device: any, ): any;
declare function gamepad_set_option(): any;
declare function gamepad_get_option(): any;
declare function display_get_gui_height(): any;
declare function display_get_gui_width(): any;
declare function display_set_gui_size(_width: any, _height: any, ): any;
declare function display_set_gui_maximise(_xscale: any, _yscale: any, _xoffset: any, _yoffset: any, ): any;
declare function display_get_dpi_x(): any;
declare function display_get_dpi_y(): any;
declare function display_get_width(): any;
declare function display_get_height(): any;
declare function display_get_orientation(): any;
declare function draw_clear(_col: any, ): any;
declare function draw_clear_alpha_RELEASE(_col: any, _alpha: any, ): any;
declare function make_color_rgb(_red: any, _green: any, _blue: any, ): any;
declare function make_color(_r: any, _g: any, _b: any, ): any;
declare function color_get_blue(_col: any, ): any;
declare function color_get_green(_col: any, ): any;
declare function color_get_red(_col: any, ): any;
declare function Color_RGBtoHSV(_col: any, ): any;
declare function color_get_hue(_col: any, ): any;
declare function color_get_saturation(_col: any, ): any;
declare function color_get_value(_col: any, ): any;
declare function merge_color(_col1: any, _col2: any, _amount: any, ): any;
declare function make_color_hsv(_hue: any, _saturation: any, _value: any, ): any;
declare function draw_set_alpha(_alpha: any, ): any;
declare function draw_get_alpha(): any;
declare function draw_get_color(): any;
declare function draw_set_color(_colour: any, ): any;
declare function draw_set_lighting(_enable: any, ): any;
declare function draw_light_enable(ind: any, _enable: any, ): any;
declare function draw_light_define_direction(ind: any, dx: any, dy: any, dz: any, col: any, ): any;
declare function draw_light_define_ambient(colour: any, ): any;
declare function draw_light_define_point(ind: any, x: any, y: any, z: any, r: any, col: any, ): any;
declare function draw_light_get_ambient(): any;
declare function draw_light_get(ind: any, ): any;
declare function draw_get_lighting(): any;
declare function draw_roundrect(_x1: any, _y1: any, _x2: any, _y2: any, _outline: any, ): any;
declare function draw_roundrect_ext(_x1: any, _y1: any, _x2: any, _y2: any, _radx: any, _rady: any, _outline: any, ): any;
declare function draw_roundrect_color(_x1: any, _y1: any, _x2: any, _y2: any, _col1: any, _col2: any, _outline: any, ): any;
declare function draw_roundrect_color_EXT_RELEASE(_x1: any, _y1: any, _x2: any, _y2: any, _radx: any, _rady: any, _col1: any, _col2: any, _outline: any, ): any;
declare function draw_rectangle_RELEASE(_x1: any, _y1: any, _x2: any, _y2: any, _outline: any, ): any;
declare function draw_rectangle_color_RELEASE(_x1: any, _y1: any, _x2: any, _y2: any, _col1: any, _col2: any, _col3: any, _col4: any, _outline: any, ): any;
declare function draw_rectangle_gradient_RELEASE(_x1: any, _y1: any, _x2: any, _y2: any, _col1: any, _col2: any, _vert: any, _outline: any, ): any;
declare function draw_point_RELEASE(_x: any, _y: any, ): any;
declare function draw_line_width(_x1: any, _y1: any, _x2: any, _y2: any, _w: any, ): any;
declare function draw_line(_x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function draw_getpixel_RELEASE(_x: any, _y: any, ): any;
declare function draw_getpixel_ext_RELEASE(_x: any, _y: any, ): any;
declare function draw_triangle_RELEASE(_x1: any, _y1: any, _x2: any, _y2: any, _x3: any, _y3: any, _outline: any, ): any;
declare function draw_triangle_color_RELEASE(_x1: any, _y1: any, _x2: any, _y2: any, _x3: any, _y3: any, _col1: any, _col2: any, _col3: any, _outline: any, ): any;
declare function draw_healthbar_ex_RELEASE(_x1: any, _y1: any, _x2: any, _y2: any, _amount: any, _backcol: any, _mincol: any, _midcol: any, _maxcol: any, _direction: any, _showback: any, _showborder: any, ): any;
declare function draw_healthbar(_x1: any, _y1: any, _x2: any, _y2: any, _amount: any, _backcol: any, _mincol: any, _maxcol: any, _direction: any, _showback: any, _showborder: any, ): any;
declare function draw_set_circle_precision(_precision: any, ): any;
declare function draw_get_circle_precision(): any;
declare function draw_arrow_RELEASE(x1: any, y1: any, x2: any, y2: any, size: any, ): any;
declare function draw_ellipse(_x1: any, _y1: any, _x2: any, _y2: any, _outline: any, ): any;
declare function draw_ellipse_color_RELEASE(x: any, y: any, x1: any, y1: any, _col1: any, _col2: any, outline: any, ): any;
declare function draw_circle_color_RELEASE(_x: any, _y: any, _r: any, _col1: any, _col2: any, _outline: any, ): any;
declare function draw_circle(_x: any, _y: any, _r: any, _outline: any, ): any;
declare function draw_point_color_RELEASE(_x: any, _y: any, _col: any, ): any;
declare function draw_line_width_color_RELEASE(_x1: any, _y1: any, _x2: any, _y2: any, _w: any, _col1: any, _col2: any, ): any;
declare function draw_line_color(_x1: any, _y1: any, _x2: any, _y2: any, _col1: any, _col2: any, ): any;
declare function draw_button(_x1: any, _y1: any, _x2: any, _y2: any, _down: any, ): any;
declare function draw_ellipse_gradient(x: any, y: any, x1: any, y1: any, col1: any, col2: any, outline: any, ): any;
declare function draw_set_blend_mode(_blend: any, ): any;
declare function draw_set_blend_mode_ext_html5(src: any, dest: any, ): any;
declare function draw_texture_flush(): any;
declare function draw_enable_drawevent(_onoff: any, ): any;
declare function skeleton_animation_set(_inst: any, _name: any, _loop: any, ): any;
declare function skeleton_animation_mix(_inst: any, _anim_from: any, _anim_to: any, _duration: any, ): any;
declare function skeleton_animation_set_ext(_inst: any, _anim: any, _track: any, _loop: any, ): any;
declare function skeleton_animation_get_ext(_inst: any, _track: any, ): any;
declare function skeleton_attachment_set(_inst: any, _slot: any, _attachment: any, ): any;
declare function skeleton_attachment_get(_inst: any, _slot: any, ): any;
declare function skeleton_attachment_create(_inst: any, _name: any, _sprite: any, _ind: any, _xo: any, _yo: any, _xs: any, _ys: any, _rot: any, ): any;
declare function skeleton_attachment_create_colour(_inst: any, _name: any, _sprite: any, _ind: any, _xo: any, _yo: any, _xs: any, _ys: any, _rot: any, _col: any, _alpha: any, ): any;
declare function skeleton_attachment_create_color(_inst: any, _name: any, _sprite: any, _ind: any, _xo: any, _yo: any, _xs: any, _ys: any, _rot: any, _col: any, _alpha: any, ): any;
declare function skeleton_attachment_replace(_inst: any, _name: any, _sprite: any, _ind: any, _xo: any, _yo: any, _xs: any, _ys: any, _rot: any, ): any;
declare function skeleton_attachment_replace_colour(_inst: any, _name: any, _sprite: any, _ind: any, _xo: any, _yo: any, _xs: any, _ys: any, _rot: any, _col: any, _alpha: any, ): any;
declare function skeleton_attachment_destroy(_inst: any, _name: any, ): any;
declare function skeleton_attachment_exists(_inst: any, _name: any, ): any;
declare function skeleton_attachment_replace_color(_inst: any, _name: any, _sprite: any, _ind: any, _xo: any, _yo: any, _xs: any, _ys: any, _rot: any, _col: any, _alpha: any, ): any;
declare function skeleton_slot_colour_set(_inst: any, _slot: any, _col: any, _alpha: any, ): any;
declare function skeleton_slot_color_set(_inst: any, _slot: any, _col: any, _alpha: any, ): any;
declare function skeleton_slot_colour_get(_inst: any, _slot: any, ): any;
declare function skeleton_slot_color_get(_inst: any, _slot: any, ): any;
declare function skeleton_slot_alpha_get(_inst: any, _slot: any, ): any;
declare function skeleton_skin_set(_inst: any, _name: any, ): any;
declare function skeleton_skin_get(_inst: any, ): any;
declare function skeleton_skin_create(_inst: any, _name: any, _base: any, ): any;
declare function skeleton_animation_get(_inst: any, ): any;
declare function skeleton_animation_get_duration(_inst: any, _animation: any, ): any;
declare function skeleton_animation_get_frames(_inst: any, _animation: any, ): any;
declare function skeleton_animation_get_frame(_inst: any, _track: any, ): any;
declare function skeleton_animation_set_frame(_inst: any, _track: any, _index: any, ): any;
declare function skeleton_animation_get_position(_inst: any, _track: any, ): any;
declare function skeleton_animation_set_position(_inst: any, _track: any, _position: any, ): any;
declare function skeleton_animation_get_event_frames(_inst: any, _anim: any, _event: any, ): any;
declare function skeleton_animation_clear(_inst: any, _track: any, ): any;
declare function skeleton_animation_is_looping(_inst: any, _track: any, ): any;
declare function skeleton_animation_is_finished(_inst: any, _track: any, ): any;
declare function skeleton_collision_draw_set(_inst: any, _val: any, ): any;
declare function skeleton_bone_data_get(_inst: any, _bone: any, _map: any, ): any;
declare function skeleton_bone_data_set(_inst: any, _bone: any, _map: any, ): any;
declare function skeleton_bone_state_get(_inst: any, _bone: any, _map: any, ): any;
declare function skeleton_bone_state_set(_inst: any, _bone: any, _map: any, ): any;
declare function draw_skeleton(_sprite: any, _animname: any, _skinname: any, _frame: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, _colour: any, _alpha: any, ): any;
declare function draw_skeleton_time(_sprite: any, _animname: any, _skinname: any, _time: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, _colour: any, _alpha: any, ): any;
declare function draw_skeleton_instance(): any;
declare function draw_skeleton_collision(_sprite: any, _animname: any, _frame: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, _colour: any, ): any;
declare function draw_enable_skeleton_blendmodes(_enable: any, ): any;
declare function draw_get_enable_skeleton_blendmodes(): any;
declare function skeleton_animation_list(_sprite: any, _list: any, ): any;
declare function skeleton_skin_list(_sprite: any, _list: any, ): any;
declare function skeleton_bone_list(_sprite: any, _list: any, ): any;
declare function skeleton_slot_list(_sprite: any, _list: any, ): any;
declare function skeleton_slot_data(_sprite: any, _list: any, ): any;
declare function skeleton_slot_data_instance(_inst: any, _list: any, ): any;
declare function skeleton_get_imageindex(_inst: any, _track: any, ): any;
declare function skeleton_get_minmax(_inst: any, ): any;
declare function skeleton_get_num_bounds(_inst: any, ): any;
declare function skeleton_get_bounds(_inst: any, _index: any, ): any;
declare function skeleton_find_slot(_inst: any, _x: any, _y: any, _list: any, ): any;
declare function draw_enable_swf_aa(_flag: any, ): any;
declare function draw_set_swf_aa_level(_aalevel: any, ): any;
declare function draw_get_swf_aa_level(): any;
declare function SetViewExtents(xview: any, yview: any, wview: any, hview: any, angle: any, ): any;
declare function GetViewFrustum(): any;
declare function DirtyRoomExtents(): any;
declare function UpdateTransRoomExtents(): any;
declare function view_get_camera(view: any, ): any;
declare function view_get_visible(view: any, ): any;
declare function view_get_xport(view: any, ): any;
declare function view_get_yport(view: any, ): any;
declare function view_get_wport(view: any, ): any;
declare function view_get_hport(view: any, ): any;
declare function view_get_surface_id(view: any, ): any;
declare function view_set_camera(view: any, camera: any, ): any;
declare function view_set_visible(view: any, visible: any, ): any;
declare function view_set_xport(view: any, xport: any, ): any;
declare function view_set_yport(view: any, yport: any, ): any;
declare function view_set_wport(view: any, wport: any, ): any;
declare function view_set_hport(view: any, hport: any, ): any;
declare function view_set_surface_id(view: any, surface_id: any, ): any;
declare function display_get_windows_vertex_buffer_method(): any;
declare function display_get_windows_alternate_sync(): any;
declare function display_set_windows_vertex_buffer_method(): any;
declare function display_set_windows_alternate_sync(): any;
declare function display_set_ui_visibility(): any;
declare function display_set_sleep_margin(): any;
declare function display_get_sleep_margin(): any;
declare function display_set_gui_maximize(_xscale: any, _yscale: any, _xoffset: any, _yoffset: any, ): any;
declare function draw_clear_alpha(_col: any, _alpha: any, ): any;
declare function make_colour_rgb(_red: any, _green: any, _blue: any, ): any;
declare function make_colour(_r: any, _g: any, _b: any, ): any;
declare function colour_get_blue(_col: any, ): any;
declare function colour_get_green(_col: any, ): any;
declare function colour_get_red(_col: any, ): any;
declare function colour_get_hue(_col: any, ): any;
declare function colour_get_saturation(_col: any, ): any;
declare function colour_get_value(_col: any, ): any;
declare function merge_colour(_col1: any, _col2: any, _amount: any, ): any;
declare function make_colour_hsv(_hue: any, _saturation: any, _value: any, ): any;
declare function draw_get_colour(): any;
declare function draw_set_colour(_colour: any, ): any;
declare function draw_roundrect_colour(_x1: any, _y1: any, _x2: any, _y2: any, _col1: any, _col2: any, _outline: any, ): any;
declare function draw_roundrect_color_ext(_x1: any, _y1: any, _x2: any, _y2: any, _radx: any, _rady: any, _col1: any, _col2: any, _outline: any, ): any;
declare function draw_roundrect_colour_ext(_x1: any, _y1: any, _x2: any, _y2: any, _radx: any, _rady: any, _col1: any, _col2: any, _outline: any, ): any;
declare function draw_rectangle(_x1: any, _y1: any, _x2: any, _y2: any, _outline: any, ): any;
declare function draw_rectangle_color(_x1: any, _y1: any, _x2: any, _y2: any, _col1: any, _col2: any, _col3: any, _col4: any, _outline: any, ): any;
declare function draw_rectangle_colour(_x1: any, _y1: any, _x2: any, _y2: any, _col1: any, _col2: any, _col3: any, _col4: any, _outline: any, ): any;
declare function draw_rectangle_gradient(_x1: any, _y1: any, _x2: any, _y2: any, _col1: any, _col2: any, _vert: any, _outline: any, ): any;
declare function draw_point(_x: any, _y: any, ): any;
declare function draw_getpixel(_x: any, _y: any, ): any;
declare function draw_getpixel_ext(_x: any, _y: any, ): any;
declare function draw_triangle(_x1: any, _y1: any, _x2: any, _y2: any, _x3: any, _y3: any, _outline: any, ): any;
declare function draw_triangle_color(_x1: any, _y1: any, _x2: any, _y2: any, _x3: any, _y3: any, _col1: any, _col2: any, _col3: any, _outline: any, ): any;
declare function draw_triangle_colour(_x1: any, _y1: any, _x2: any, _y2: any, _x3: any, _y3: any, _col1: any, _col2: any, _col3: any, _outline: any, ): any;
declare function draw_healthbar_ex(_x1: any, _y1: any, _x2: any, _y2: any, _amount: any, _backcol: any, _mincol: any, _midcol: any, _maxcol: any, _direction: any, _showback: any, _showborder: any, ): any;
declare function draw_arrow(x1: any, y1: any, x2: any, y2: any, size: any, ): any;
declare function draw_ellipse_color(x: any, y: any, x1: any, y1: any, _col1: any, _col2: any, outline: any, ): any;
declare function draw_ellipse_colour(x: any, y: any, x1: any, y1: any, _col1: any, _col2: any, outline: any, ): any;
declare function draw_circle_color(_x: any, _y: any, _r: any, _col1: any, _col2: any, _outline: any, ): any;
declare function draw_circle_colour(_x: any, _y: any, _r: any, _col1: any, _col2: any, _outline: any, ): any;
declare function draw_point_color(_x: any, _y: any, _col: any, ): any;
declare function draw_point_colour(_x: any, _y: any, _col: any, ): any;
declare function draw_line_width_color(_x1: any, _y1: any, _x2: any, _y2: any, _w: any, _col1: any, _col2: any, ): any;
declare function draw_line_width_colour(_x1: any, _y1: any, _x2: any, _y2: any, _w: any, _col1: any, _col2: any, ): any;
declare function draw_line_colour(_x1: any, _y1: any, _x2: any, _y2: any, _col1: any, _col2: any, ): any;
declare function draw_set_blend_mode_ext(src: any, dest: any, ): any;
declare function HTTP_onload(_xmlhttp: any, _pFile: any, ): any;
declare function HTTP_ReadyStateChange(_xmlhttp: any, _onload: any, ): any;
declare function FailAsyncHTTPRequest(_url: any, ): any;
declare function DoAsyncHTTPRequest(_type: any, _url: any, _headers: any, _params: any, _onload: any, _responseType: any, ): any;
declare function GetHTTPRequestSettings(_url: any, _headers: any, ): any;
declare function DoStdAsyncHTTPRequest(_type: any, _url: any, _headers: any, _params: any, _xmlhttp: any, _onload: any, ): any;
declare function DoIE9AsyncHTTPRequest(_type: any, _url: any, _headers: any, _params: any, _xmlhttp: any, _xdomain: any, _onload: any, ): any;
declare function IE_Http_Get_onload(_event: any, _xmlhttp: any, _status: any, ): any;
declare function IE_Http_Get_onerror(_event: any, _xmlhttp: any, ): any;
declare function http_get(_url: any, ): any;
declare function http_get_file(_url: any, _localTarget: any, ): any;
declare function http_post_string(_url: any, _string: any, ): any;
declare function http_request(_url: any, _method: any, _headerMap: any, _body: any, ): any;
declare function http_request_buffer(_url: any, _method: any, _headers: any, _body: any, ): any;
declare function http_set_request_crossorigin(_crossOriginType: any, ): any;
declare function http_get_request_crossorigin(): any;
declare function iap_store_status(): any;
declare function iap_event_queue(): any;
declare function iap_product_status(): any;
declare function iap_is_downloaded(): any;
declare function iap_product_files(): any;
declare function iap_files_purchased(): any;
declare function iap_activate(_val: any, ): any;
declare function iap_status(): any;
declare function iap_acquire(_product: any, _payload: any, ): any;
declare function iap_consume(_product: any, ): any;
declare function iap_restore_all(): any;
declare function iap_enumerate_products(_list: any, ): any;
declare function iap_product_details(_product: any, _map: any, ): any;
declare function iap_purchase_details(_purchase: any, _map: any, ): any;
declare function keyboard_key_press(_key: any, ): any;
declare function keyboard_key_release(_key: any, ): any;
declare function mouse_check(_num: any, ): any;
declare function mouse_check_button(_num: any, ): any;
declare function mouse_check_button_pressed(_num: any, ): any;
declare function mouse_check_button_released(_num: any, ): any;
declare function mouse_wheel_up(): any;
declare function mouse_wheel_down(): any;
declare function mouse_clear(_button: any, ): any;
declare function io_clear(): any;
declare function keyboard_check(_key: any, ): any;
declare function keyboard_check_pressed(_key: any, ): any;
declare function keyboard_clear(_key: any, ): any;
declare function keyboard_check_released(_key: any, ): any;
declare function keyboard_check_direct(_key: any, ): any;
declare function display_mouse_get_x(): any;
declare function display_mouse_get_y(): any;
declare function keyboard_set_map(_from: any, _to: any, ): any;
declare function keyboard_get_map(_key: any, ): any;
declare function keyboard_unset_map(): any;
declare function keyboard_virtual_show(): any;
declare function keyboard_virtual_hide(): any;
declare function keyboard_virtual_status(): any;
declare function keyboard_virtual_height(): any;
declare function gesture_drag_time(_val: any, ): any;
declare function gesture_drag_distance(_val: any, ): any;
declare function gesture_flick_speed(_val: any, ): any;
declare function gesture_double_tap_time(_val: any, ): any;
declare function gesture_double_tap_distance(_val: any, ): any;
declare function gesture_pinch_distance(_val: any, ): any;
declare function gesture_pinch_angle_towards(_val: any, ): any;
declare function gesture_pinch_angle_away(_val: any, ): any;
declare function gesture_rotate_time(_val: any, ): any;
declare function gesture_rotate_angle(_val: any, ): any;
declare function gesture_tap_count(_val: any, ): any;
declare function gesture_get_drag_time(): any;
declare function gesture_get_drag_distance(): any;
declare function gesture_get_flick_speed(): any;
declare function gesture_get_double_tap_time(): any;
declare function gesture_get_double_tap_distance(): any;
declare function gesture_get_pinch_distance(): any;
declare function gesture_get_pinch_angle_towards(): any;
declare function gesture_get_pinch_angle_away(): any;
declare function gesture_get_rotate_time(): any;
declare function gesture_get_rotate_angle(): any;
declare function gesture_get_tap_count(): any;
declare function instance_find(_obj: any, _n: any, ): any;
declare function instance_id_get(_inst: any, _index: any, ): any;
declare function instance_exists(_obj: any, ): any;
declare function instance_number(_obj: any, ): any;
declare function instance_position(_x: any, _y: any, _obj: any, ): any;
declare function instance_position_list(_x: any, _y: any, _obj: any, _list: any, _ordered: any, ): any;
declare function instance_nearest(_inst: any, _x: any, _y: any, _obj: any, ): any;
declare function instance_furthest(_inst: any, _x: any, _y: any, _obj: any, ): any;
declare function instance_place(_pInst: any, _x: any, _y: any, _obj: any, ): any;
declare function instance_place_list(_pInst: any, _x: any, _y: any, _obj: any, _list: any, _ordered: any, ): any;
declare function DoDestroy(_pInst: any, _executeEvent: any, ): any;
declare function instance_destroy(_pInst: any, _id: any, _executeEvent: any, ): any;
declare function position_destroy(_inst: any, _x: any, _y: any, ): any;
declare function position_change(_inst: any, _x: any, _y: any, _objindex: any, _perf: any, ): any;
declare function motion_set(_inst: any, _dir: any, _speed: any, ): any;
declare function motion_add(_inst: any, _dir: any, _speed: any, ): any;
declare function instance_copy(_inst: any, _performevent: any, ): any;
declare function instance_change_RELEASE(_inst: any, _objindex: any, _perf: any, ): any;
declare function instance_change_DEBUG(_inst: any, _objindex: any, _perf: any, ): any;
declare function instance_deactivate_all(_inst: any, _notme: any, ): any;
declare function instance_activate_all(_inst: any, ): any;
declare function object_has_parent(_obj: any, _parentIndex: any, ): any;
declare function instance_activate_object(_inst: any, _objindex: any, ): any;
declare function instance_deactivate_object(_inst: any, _objindex: any, ): any;
declare function instance_deactivate_region(_inst: any, _left: any, _top: any, _width: any, _height: any, _wantinside: any, _notme: any, ): any;
declare function instance_deactivate_region_special(_inst: any, _x: any, _y: any, _width: any, _height: any, _notme: any, _activateArray: any, _deactivateArray: any, ): any;
declare function instance_deactivate_layer(_inst: any, arg1: any, ): any;
declare function instance_activate_layer(inst: any, arg1: any, ): any;
declare function instance_activate_region(_inst: any, _left: any, _top: any, _width: any, _height: any, _wantinside: any, ): any;
declare function instance_change(_inst: any, _objindex: any, _perf: any, ): any;
declare function CBackGM2(): any;
declare function CLayer(): any;
declare function YYRoomLayer(): any;
declare function YYRoomTile3(): any;
declare function CLayerInstanceElement(): any;
declare function CLayerBackgroundElement(): any;
declare function CLayerTilemapElement(): any;
declare function CLayerOldTilemapElement(): any;
declare function CLayerSpriteElement(): any;
declare function CLayerSequenceElement(): any;
declare function CLayerParticleElement(): any;
declare function CLayerTileElement(): any;
declare function CLayerEffectParam(): any;
declare function CLayerEffectInfo(): any;
declare function LayerManager(): any;
declare function ConvertFileEffectParamType(_filetype: any, ): any;
declare function layer_get_id(_name: any, ): any;
declare function layer_get_id_at_depth(_depth: any, ): any;
declare function layer_get_depth(_id: any, ): any;
declare function layer_create(_depth: any, _name: any, ): any;
declare function layer_destroy(arg1: any, ): any;
declare function layer_destroy_instances(arg1: any, ): any;
declare function layer_add_instance(arg1: any, arg2: any, ): any;
declare function layer_remove_instance(arg1: any, arg2: any, ): any;
declare function layer_has_instance(arg1: any, arg2: any, ): any;
declare function layer_instance_get_instance(_id: any, ): any;
declare function layer_set_visible(arg1: any, arg2: any, ): any;
declare function layer_get_visible(arg1: any, ): any;
declare function layer_exists(arg1: any, ): any;
declare function layer_script_begin(arg1: any, arg2: any, ): any;
declare function layer_script_end(arg1: any, arg2: any, ): any;
declare function layer_shader(arg1: any, arg2: any, ): any;
declare function __find_script_id(_script: any, ): any;
declare function layer_get_script_begin(arg1: any, ): any;
declare function layer_get_script_end(arg1: any, ): any;
declare function layer_get_shader(arg1: any, ): any;
declare function layer_set_target_room(arg1: any, ): any;
declare function layer_get_target_room(): any;
declare function layer_reset_target_room(): any;
declare function layer_background_get_id(arg1: any, ): any;
declare function layer_background_exists(arg1: any, arg2: any, ): any;
declare function layer_background_create(arg1: any, arg2: any, ): any;
declare function layer_background_destroy(arg1: any, ): any;
declare function layer_background_visible(arg1: any, arg2: any, ): any;
declare function layer_background_change(arg1: any, arg2: any, ): any;
declare function layer_background_htiled(arg1: any, arg2: any, ): any;
declare function layer_background_vtiled(arg1: any, arg2: any, ): any;
declare function layer_background_xscale(arg1: any, arg2: any, ): any;
declare function layer_background_yscale(arg1: any, arg2: any, ): any;
declare function layer_background_stretch(arg1: any, arg2: any, ): any;
declare function layer_background_blend(arg1: any, arg2: any, ): any;
declare function layer_background_alpha(arg1: any, arg2: any, ): any;
declare function layer_background_index(arg1: any, arg2: any, ): any;
declare function layer_background_sprite(arg1: any, arg2: any, ): any;
declare function layer_background_speed(arg1: any, arg2: any, ): any;
declare function layer_background_get_visible(arg1: any, ): any;
declare function layer_background_get_sprite(arg1: any, ): any;
declare function layer_background_get_htiled(arg1: any, ): any;
declare function layer_background_get_vtiled(arg1: any, ): any;
declare function layer_background_get_stretch(arg1: any, ): any;
declare function layer_background_get_xscale(arg1: any, ): any;
declare function layer_background_get_yscale(arg1: any, ): any;
declare function layer_background_get_blend(arg1: any, ): any;
declare function layer_background_get_alpha(arg1: any, ): any;
declare function layer_background_get_index(arg1: any, ): any;
declare function layer_background_get_speed(arg1: any, ): any;
declare function layer_sprite_get_id(_layerid: any, _spritename: any, ): any;
declare function layer_sprite_exists(arg1: any, arg2: any, ): any;
declare function layer_sprite_create(arg1: any, arg2: any, arg3: any, arg4: any, ): any;
declare function layer_sprite_destroy(arg1: any, ): any;
declare function layer_sprite_change(arg1: any, arg2: any, ): any;
declare function layer_sprite_index(arg1: any, arg2: any, ): any;
declare function layer_sprite_speed(arg1: any, arg2: any, ): any;
declare function layer_sprite_xscale(arg1: any, arg2: any, ): any;
declare function layer_sprite_yscale(arg1: any, arg2: any, ): any;
declare function layer_sprite_angle(arg1: any, arg2: any, ): any;
declare function layer_sprite_blend(arg1: any, arg2: any, ): any;
declare function layer_sprite_alpha(arg1: any, arg2: any, ): any;
declare function layer_sprite_x(arg1: any, arg2: any, ): any;
declare function layer_sprite_y(arg1: any, arg2: any, ): any;
declare function layer_sprite_get_sprite(arg1: any, ): any;
declare function layer_sprite_get_index(arg1: any, ): any;
declare function layer_sprite_get_speed(arg1: any, ): any;
declare function layer_sprite_get_xscale(arg1: any, ): any;
declare function layer_sprite_get_yscale(arg1: any, ): any;
declare function layer_sprite_get_angle(arg1: any, ): any;
declare function layer_sprite_get_blend(arg1: any, ): any;
declare function layer_sprite_get_alpha(arg1: any, ): any;
declare function layer_sprite_get_x(arg1: any, ): any;
declare function layer_sprite_get_y(arg1: any, ): any;
declare function layer_tilemap_get_id(arg1: any, ): any;
declare function layer_tilemap_exists(arg1: any, arg2: any, ): any;
declare function layer_tilemap_create(arg1: any, arg2: any, arg3: any, arg4: any, arg5: any, arg6: any, ): any;
declare function layer_tilemap_destroy(arg1: any, ): any;
declare function layer_x(arg1: any, arg2: any, ): any;
declare function layer_y(arg1: any, arg2: any, ): any;
declare function layer_get_x(arg1: any, ): any;
declare function layer_get_y(arg1: any, ): any;
declare function layer_hspeed(layer_id: any, speed: any, ): any;
declare function layer_vspeed(layer_id: any, speed: any, ): any;
declare function layer_get_hspeed(layer_id: any, ): any;
declare function layer_get_vspeed(layer_id: any, ): any;
declare function tilemap_tileset(arg1: any, arg2: any, ): any;
declare function tilemap_x(arg1: any, arg2: any, ): any;
declare function tilemap_y(arg1: any, arg2: any, ): any;
declare function tilemap_set(arg1: any, arg2: any, arg3: any, arg4: any, ): any;
declare function CLayerElement(): any;
declare function tilemap_set_at_pixel(arg1: any, arg2: any, arg3: any, arg4: any, ): any;
declare function tileset_get_texture(_ind: any, ): any;
declare function tileset_get_name(_ind: any, ): any;
declare function tileset_get_uvs(_ind: any, ): any;
declare function tileset_get_info(_ind: any, ): any;
declare function tilemap_get_tileset(arg1: any, ): any;
declare function tilemap_get_tile_width(arg1: any, ): any;
declare function tilemap_get_tile_height(arg1: any, ): any;
declare function tilemap_get_width(arg1: any, ): any;
declare function tilemap_get_height(arg1: any, ): any;
declare function tilemap_resize(_tilemap: any, _newWidth: any, _newHeight: any, ): any;
declare function tilemap_set_width(_tilemap: any, _newWidth: any, ): any;
declare function tilemap_set_height(_tilemap: any, _newHeight: any, ): any;
declare function tilemap_get_x(arg1: any, ): any;
declare function tilemap_get_y(arg1: any, ): any;
declare function tilemap_get(arg1: any, arg2: any, arg3: any, ): any;
declare function tilemap_get_at_pixel(arg1: any, arg2: any, arg3: any, ): any;
declare function tilemap_get_cell_x_at_pixel(arg1: any, arg2: any, arg3: any, ): any;
declare function tilemap_get_cell_y_at_pixel(arg1: any, arg2: any, arg3: any, ): any;
declare function tilemap_clear(arg1: any, arg2: any, ): any;
declare function tilemap_set_global_mask(arg1: any, ): any;
declare function tilemap_get_global_mask(): any;
declare function tilemap_get_mask(arg1: any, ): any;
declare function tilemap_get_frame(arg1: any, ): any;
declare function tilemap_set_mask(arg1: any, arg2: any, ): any;
declare function draw_tilemap(inst: any, arg1: any, arg2: any, arg3: any, ): any;
declare function tile_set_empty(arg1: any, ): any;
declare function tile_set_index(arg1: any, arg2: any, ): any;
declare function tile_set_flip(arg1: any, arg2: any, ): any;
declare function tile_set_mirror(arg1: any, arg2: any, ): any;
declare function tile_set_rotate(arg1: any, arg2: any, ): any;
declare function tile_get_empty(arg1: any, ): any;
declare function tile_get_index(arg1: any, ): any;
declare function tile_get_flip(arg1: any, ): any;
declare function tile_get_mirror(arg1: any, ): any;
declare function tile_get_rotate(arg1: any, ): any;
declare function ShallowCopyVars(_dest: any, _other: any, ): any;
declare function instance_create_depth(_x: any, _y: any, _depth: any, _objind: any, _basis: any, ): any;
declare function instance_create_layer(_x: any, _y: any, _layerid: any, _obj: any, _basis: any, ): any;
declare function layer_get_all(): any;
declare function layer_get_all_elements(_layerid: any, ): any;
declare function layer_get_name(_layerid: any, ): any;
declare function layer_depth(_layerid: any, _depth: any, ): any;
declare function layer_get_element_layer(_elid: any, ): any;
declare function layer_get_element_type(_elid: any, ): any;
declare function layer_element_move(_elid: any, _targetlayerID: any, ): any;
declare function layer_force_draw_depth(_force: any, _depth: any, ): any;
declare function layer_is_draw_depth_forced(): any;
declare function layer_get_forced_depth(): any;
declare function layer_tile_exists(_layerid: any, _arg2: any, ): any;
declare function layer_tile_create(_layerid: any, _x: any, _y: any, _tileset: any, _left: any, _top: any, _width: any, _height: any, ): any;
declare function layer_tile_destroy(_elid: any, ): any;
declare function layer_tile_change(tile_element_id: any, sprite: any, ): any;
declare function layer_tile_xscale(tile_element_id: any, scale: any, ): any;
declare function layer_tile_yscale(tile_element_id: any, scale: any, ): any;
declare function layer_tile_blend(tile_element_id: any, col: any, ): any;
declare function layer_tile_alpha(tile_element_id: any, alpha: any, ): any;
declare function layer_tile_x(tile_element_id: any, x: any, ): any;
declare function layer_tile_y(tile_element_id: any, y: any, ): any;
declare function layer_tile_region(tile_element_id: any, left: any, top: any, width: any, height: any, ): any;
declare function layer_tile_visible(tile_element_id: any, visible: any, ): any;
declare function layer_tile_get_sprite(tile_element_id: any, ): any;
declare function layer_tile_get_xscale(tile_element_id: any, ): any;
declare function layer_tile_get_yscale(tile_element_id: any, ): any;
declare function layer_tile_get_blend(tile_element_id: any, ): any;
declare function layer_tile_get_alpha(tile_element_id: any, ): any;
declare function layer_tile_get_x(tile_element_id: any, ): any;
declare function layer_tile_get_y(tile_element_id: any, ): any;
declare function layer_tile_get_region(tile_element_id: any, ): any;
declare function layer_tile_get_visible(tile_element_id: any, ): any;
declare function layerSequenceGetInstance(sequence_element_id: any, ): any;
declare function layer_sequence_get_instance(sequence_element_id: any, ): any;
declare function layer_sequence_create(layer_id: any, posx: any, posy: any, sequence_id: any, ): any;
declare function layer_sequence_destroy(sequence_element_id: any, ): any;
declare function layer_sequence_exists(arg1: any, arg2: any, ): any;
declare function layer_sequence_x(sequence_element_id: any, pos_x: any, ): any;
declare function layer_sequence_y(sequence_element_id: any, pos_y: any, ): any;
declare function layer_sequence_angle(sequence_element_id: any, angle: any, ): any;
declare function layer_sequence_xscale(sequence_element_id: any, xscale: any, ): any;
declare function layer_sequence_yscale(sequence_element_id: any, yscale: any, ): any;
declare function layer_sequence_headpos(sequence_element_id: any, position: any, ): any;
declare function layer_sequence_headdir(sequence_element_id: any, direction: any, ): any;
declare function layer_sequence_pause(sequence_element_id: any, ): any;
declare function layer_sequence_play(sequence_element_id: any, ): any;
declare function layer_sequence_speedscale(sequence_element_id: any, speedscale: any, ): any;
declare function layer_sequence_get_x(sequence_element_id: any, ): any;
declare function layer_sequence_get_y(sequence_element_id: any, ): any;
declare function layer_sequence_get_angle(sequence_element_id: any, ): any;
declare function layer_sequence_get_xscale(sequence_element_id: any, ): any;
declare function layer_sequence_get_yscale(sequence_element_id: any, ): any;
declare function layer_sequence_get_headpos(sequence_element_id: any, ): any;
declare function layer_sequence_get_headdir(sequence_element_id: any, ): any;
declare function layer_sequence_get_sequence(sequence_element_id: any, ): any;
declare function layer_sequence_is_paused(sequence_element_id: any, ): any;
declare function layer_sequence_is_finished(sequence_element_id: any, ): any;
declare function layer_sequence_get_speedscale(sequence_element_id: any, ): any;
declare function layer_sequence_get_length(sequence_element_id: any, ): any;
declare function sequence_instance_exists(_objectID: any, ): any;
declare function fx_create(_effectname: any, ): any;
declare function fx_get_name(_effect: any, ): any;
declare function fx_get_parameter_names(_effect: any, ): any;
declare function fx_get_parameter(_effect: any, _name: any, ): any;
declare function fx_get_parameters(_effect: any, ): any;
declare function fx_get_single_layer(_effect: any, ): any;
declare function fx_set_parameter(_effect: any, _name: any, _val: any, ): any;
declare function fx_set_parameters(_effect: any, _valObj: any, ): any;
declare function fx_set_single_layer(_effect: any, _val: any, ): any;
declare function layer_set_fx(_layerId: any, _effect: any, ): any;
declare function layer_get_fx(_layerId: any, ): any;
declare function layer_clear_fx(_layerId: any, ): any;
declare function layer_enable_fx(_layerId: any, _enable: any, ): any;
declare function layer_fx_is_enabled(_layerId: any, ): any;
declare function floor(_val: any, ): any;
declare function DelphiRound(_a: any, ): any;
declare function yyRound(_a: any, ): any;
declare function abs(_a: any, ): any;
declare function cos(_a: any, ): any;
declare function dcos(_a: any, ): any;
declare function sin(_a: any, ): any;
declare function dsin(_a: any, ): any;
declare function tan(_a: any, ): any;
declare function dtan(_a: any, ): any;
declare function lengthdir_x(_len: any, _dir: any, ): any;
declare function lengthdir_y(_len: any, _dir: any, ): any;
declare function point_direction(_x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function ComputeDir(_x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function point_distance(_x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function point_distance_3d(_x1: any, _y1: any, _z1: any, _x2: any, _y2: any, _z2: any, ): any;
declare function yymin(_a: any, _b: any, ): any;
declare function yymax(_a: any, _b: any, ): any;
declare function max(): any;
declare function max3(_a: any, _b: any, _c: any, ): any;
declare function min(): any;
declare function min3(_a: any, _b: any, _c: any, ): any;
declare function InitRandom(_seed: any, ): any;
declare function random_use_old_version(_true_false: any, ): any;
declare function rand(): any;
declare function random(_v: any, ): any;
declare function irandom(_v: any, ): any;
declare function random_range(val0: any, val1: any, ): any;
declare function random_set_seed(_val: any, ): any;
declare function randomize(): any;
declare function irandom_range(val0: any, val1: any, ): any;
declare function random_get_seed(): any;
declare function choose(): any;
declare function sign(_x: any, ): any;
declare function ceil(_x: any, ): any;
declare function frac(_x: any, ): any;
declare function sqrt(_x: any, ): any;
declare function sqr(_x: any, ): any;
declare function power(_x: any, _n: any, ): any;
declare function exp(_x: any, ): any;
declare function ln(_x: any, ): any;
declare function log2(_x: any, ): any;
declare function log10(_x: any, ): any;
declare function logn(_n: any, _x: any, ): any;
declare function arcsin(_val: any, ): any;
declare function darcsin(_x: any, ): any;
declare function arccos(_val: any, ): any;
declare function darccos(_x: any, ): any;
declare function arctan(_val: any, ): any;
declare function darctan(_x: any, ): any;
declare function arctan2(_y: any, _x: any, ): any;
declare function darctan2(_y: any, _x: any, ): any;
declare function degtorad(_x: any, ): any;
declare function radtodeg(_x: any, ): any;
declare function mean(): any;
declare function median(): any;
declare function dot_product(_x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function dot_product_3d(_x1: any, _y1: any, _z1: any, _x2: any, _y2: any, _z2: any, ): any;
declare function math_set_epsilon(_d: any, ): any;
declare function math_get_epsilon(): any;
declare function dot_product_normalised(_x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function dot_product_3d_normalised(_x1: any, _y1: any, _z1: any, _x2: any, _y2: any, _z2: any, ): any;
declare function is_real(_x: any, ): any;
declare function is_numeric(_x: any, ): any;
declare function is_bool(_x: any, ): any;
declare function is_undefined(_x: any, ): any;
declare function is_int32(_x: any, ): any;
declare function is_int64(_x: any, ): any;
declare function is_ptr(_x: any, ): any;
declare function is_struct(_x: any, ): any;
declare function is_nan(_x: any, ): any;
declare function is_infinity(_x: any, ): any;
declare function static_get(s: any, ): any;
declare function static_set(d: any, s: any, ): any;
declare function YYIsInstanceof(_x: any, _v: any, ): any;
declare function YYInstanceof(_x: any, ): any;
declare function YYTypeof(_x: any, ): any;
declare function int64(_x: any, ): any;
declare function ptr(_x: any, ): any;
declare function is_string(_x: any, ): any;
declare function is_array(_x: any, ): any;
declare function array_length_1d(_x: any, ): any;
declare function array_length_2d(_x: any, _d: any, ): any;
declare function array_height_2d(_x: any, ): any;
declare function clamp(_value: any, _min: any, _max: any, ): any;
declare function lerp(_val1: any, _val2: any, _amount: any, ): any;
declare function angle_difference(_src: any, _dest: any, ): any;
declare function yyApproximatelyEqual(_val1: any, _val2: any, ): any;
declare function yyCompareVal(_val1: any, _val2: any, _prec: any, _showError: any, ): any;
declare function yyfplus(_val1: any, _val2: any, ): any;
declare function yyfminus(_val1: any, _val2: any, ): any;
declare function yyftime(_val1: any, _val2: any, ): any;
declare function yyfdivide(_val1: any, _val2: any, ): any;
declare function yyfmod(_val1: any, _val2: any, ): any;
declare function yyfdiv(_val1: any, _val2: any, ): any;
declare function yyfnotequal(_val1: any, _val2: any, ): any;
declare function yyfequal(_val1: any, _val2: any, ): any;
declare function yyfless(_val1: any, _val2: any, ): any;
declare function yyflessequal(_val1: any, _val2: any, ): any;
declare function yyfgreater(_val1: any, _val2: any, ): any;
declare function yyfgreaterequal(_val1: any, _val2: any, ): any;
declare function yyfand(_val1: any, _val2: any, ): any;
declare function yyfor(_val1: any, _val2: any, ): any;
declare function yyfxor(_val1: any, _val2: any, ): any;
declare function yyfbitand(_val1: any, _val2: any, ): any;
declare function yyfbitor(_val1: any, _val2: any, ): any;
declare function yyfbitxor(_val1: any, _val2: any, ): any;
declare function yyfbitshiftleft(_val1: any, _num: any, ): any;
declare function yyfbitshiftright(_val1: any, _num: any, ): any;
declare function round(_a: any, ): any;
declare function Round(_a: any, ): any;
declare function randomise(): any;
declare function dot_product_normalized(_x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function dot_product_3d_normalized(_x1: any, _y1: any, _z1: any, _x2: any, _y2: any, _z2: any, ): any;
declare function array_length(_x: any, ): any;
declare function extension_get_option_value(_extension_name: any, _option_name: any, ): any;
declare function extension_get_option_count(_extension_name: any, ): any;
declare function extension_get_option_names(_extension_name: any, ): any;
declare function extension_get_options(_extension_name: any, ): any;
declare function gc_collect(): any;
declare function gc_enable(_enable: any, ): any;
declare function gc_is_enabled(): any;
declare function gc_get_stats(): any;
declare function DiffDir(_dir1: any, _dir2: any, ): any;
declare function TestFree(_pInst: any, _x: any, _y: any, _objind: any, _checkall: any, ): any;
declare function mp_linear_step_common(_pInst: any, _x: any, _y: any, _stepsize: any, _objind: any, _checkall: any, ): any;
declare function mp_linear_step(_pInst: any, _x: any, _y: any, _stepsize: any, _checkall: any, ): any;
declare function mp_linear_step_object(_pInst: any, _x: any, _y: any, _stepsize: any, _obj: any, ): any;
declare function TryDir(_dir: any, _inst: any, _speed: any, _objind: any, _checkall: any, ): any;
declare function mp_potential_step_common(_pInst: any, _x: any, _y: any, _stepsize: any, _objindex: any, _checkall: any, ): any;
declare function mp_potential_step(_pInst: any, _x: any, _y: any, _stepsize: any, _checkall: any, ): any;
declare function mp_potential_step_object(_pInst: any, _x: any, _y: any, _stepsize: any, _obj: any, ): any;
declare function mp_potential_settings(_pInst: any, _maxrot: any, _rotstep: any, _ahead: any, _onspot: any, ): any;
declare function Motion_Linear_Step(_inst: any, _x: any, _y: any, _speed: any, _objind: any, _checkall: any, ): any;
declare function Motion_Linear_Path(_pInst: any, _path: any, _xg: any, _yg: any, _stepsize: any, _objind: any, _checkall: any, ): any;
declare function mp_linear_path(_pInst: any, _path: any, _xg: any, _yg: any, _stepsize: any, _checkall: any, ): any;
declare function mp_linear_path_object(_pInst: any, _path: any, _xg: any, _yg: any, _stepsize: any, _obj: any, ): any;
declare function Motion_Potential_Step(_inst: any, _x: any, _y: any, _speed: any, _objind: any, _checkall: any, ): any;
declare function Motion_Potential_Path(_inst: any, _path: any, _xg: any, _yg: any, _stepsize: any, _lenfact: any, _objind: any, _checkall: any, ): any;
declare function mp_potential_path(_pInst: any, _path: any, _xg: any, _yg: any, _stepsize: any, _factor: any, _checkall: any, ): any;
declare function mp_potential_path_object(_pInst: any, _path: any, _xg: any, _yg: any, _stepsize: any, _factor: any, _obj: any, ): any;
declare function yyMPGrid(_left: any, _top: any, _gridwidth: any, _gridheight: any, _cellwidth: any, _cellheight: any, ): any;
declare function mp_grid_create(_left: any, _top: any, _hcells: any, _vcells: any, _cellwidth: any, _cellheight: any, ): any;
declare function mp_grid_destroy(_id: any, ): any;
declare function mp_grid_clear_all(_id: any, ): any;
declare function mp_grid_clear_cell(_id: any, _h: any, _v: any, ): any;
declare function mp_grid_clear_rectangle(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function mp_grid_add_cell(_id: any, _x: any, _y: any, ): any;
declare function mp_grid_get_cell(_id: any, _x: any, _y: any, ): any;
declare function mp_grid_add_rectangle(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function mp_grid_add_instances(_inst: any, _id: any, _obj: any, _prec: any, ): any;
declare function sys_mp_grid_draw(_id: any, ): any;
declare function mp_grid_path(_pInst: any, _id: any, _path: any, _xstart: any, _ystart: any, _xgoal: any, _ygoal: any, _allowdiag: any, ): any;
declare function mp_grid_to_ds_grid(_src: any, _dest: any, ): any;
declare function mp_grid_draw(_id: any, ): any;
declare function place_free(_pInst: any, _x: any, _y: any, ): any;
declare function place_empty(_pInst: any, _x: any, _y: any, _obj: any, ): any;
declare function place_meeting(_pInst: any, _x: any, _y: any, _obj: any, ): any;
declare function place_snapped(_inst: any, _hsnap: any, _vsnap: any, ): any;
declare function move_random(_inst: any, _hsnap: any, _vsnap: any, ): any;
declare function move_snap(_pInst: any, _hsnap: any, _vsnap: any, ): any;
declare function move_wrap(_inst: any, _hor: any, _vert: any, _margin: any, ): any;
declare function move_towards_point(_pInst: any, _x: any, _y: any, _speed: any, ): any;
declare function Bounce_Test(_pInst: any, _x: any, _y: any, _useall: any, ): any;
declare function Command_Bounce(_pInst: any, _advanced: any, _useall: any, ): any;
declare function move_bounce_solid(_pInst: any, _adv: any, ): any;
declare function move_bounce_all(_pInst: any, _adv: any, ): any;
declare function Contact_TestFree(_inst: any, _x: any, _y: any, _useall: any, ): any;
declare function move_contact(_inst: any, _dir: any, _maxdist: any, _useall: any, ): any;
declare function Command_InstancePlace(_pInst: any, _x: any, _y: any, _obj: any, ): any;
declare function move_and_collide(selfinst: any, dx: any, dy: any, ind: any, _iterations: any, xoff: any, yoff: any, _x_constraint: any, _y_constraint: any, ): any;
declare function move_contact_solid(_pInst: any, _dir: any, _maxdist: any, ): any;
declare function move_contact_all(_inst: any, _dir: any, _maxdist: any, ): any;
declare function move_outside(_inst: any, _dir: any, _maxdist: any, _useall: any, ): any;
declare function move_outside_solid(_inst: any, _dir: any, _maxdist: any, ): any;
declare function move_outside_all(_inst: any, _dir: any, _maxdist: any, ): any;
declare function distance_to_point(_inst: any, _x: any, _y: any, ): any;
declare function distance_to_object(_inst: any, _obj: any, ): any;
declare function position_empty(_inst: any, _x: any, _y: any, ): any;
declare function position_meeting(_pInst: any, _x: any, _y: any, _obj: any, ): any;
declare function move_bounce(_pInst: any, _adv: any, ): any;
declare function yyWebSocket(socketObj: any, type: any, isServer: any, ): any;
declare function yyWebSocketList_add(wrap: any, ): any;
declare function yyWebSocketList_remove(wrap: any, ): any;
declare function yyDispatchNetworkingEvent(e: any, ): any;
declare function buffer_create_from_dataview(view: any, offset: any, length: any, ): any;
declare function yyDispatchNetworkingDataEvents(view: any, prefix: any, id: any, ip: any, port: any, port2: any, messageType: any, ): any;
declare function yyWebSocketServer_closure(_type: any, port: any, _max_client: any, _prefix: any, ): any;
declare function yyWebSocketClient_closure(index: any, url: any, port: any, prefix: any, ): any;
declare function network_create_server(_type: any, _port: any, _max_client: any, ): any;
declare function network_create_server_raw(_type: any, _port: any, _max_client: any, ): any;
declare function network_set_timeout(): any;
declare function network_create_socket_ext(_type: any, _port: any, ): any;
declare function network_create_socket(_type: any, _port: any, _max_client: any, ): any;
declare function network_connect(_socket: any, _url: any, _port: any, ): any;
declare function network_connect_raw(_socket: any, _url: any, _port: any, ): any;
declare function network_connect_async(_socket: any, _url: any, _port: any, ): any;
declare function network_connect_raw_async(_socket: any, _url: any, _port: any, ): any;
declare function network_resolve(_url: any, ): any;
declare function network_send_broadcast(_socket: any, _port: any, _buffer: any, _size: any, ): any;
declare function network_send_packet(_socket: any, _buffer: any, _size: any, ): any;
declare function network_send_raw(_socket: any, _buffer: any, _size: any, _options: any, ): any;
declare function network_set_config(cfg: any, val: any, ): any;
declare function network_send_udp(_socket: any, _url: any, _port: any, _buffer: any, _size: any, ): any;
declare function network_send_udp_raw(_socket: any, _url: any, _port: any, _buffer: any, _size: any, ): any;
declare function network_destroy(_socket: any, ): any;
declare function object_exists(_ind: any, ): any;
declare function object_get_name(_ind: any, ): any;
declare function object_get_sprite(_ind: any, ): any;
declare function object_get_solid(_ind: any, ): any;
declare function object_get_visible(_ind: any, ): any;
declare function object_get_depth(_ind: any, ): any;
declare function object_get_persistent(_ind: any, ): any;
declare function object_get_mask(_ind: any, ): any;
declare function object_get_parent(_ind: any, ): any;
declare function object_get_physics(_ind: any, ): any;
declare function object_set_sprite(_ind: any, _spr: any, ): any;
declare function object_set_solid(_ind: any, _solid: any, ): any;
declare function object_set_visible(_ind: any, _vis: any, ): any;
declare function object_set_persistent(_ind: any, _pers: any, ): any;
declare function object_set_mask(_ind: any, _spr: any, ): any;
declare function object_set_parent(_ind: any, _ParentID: any, ): any;
declare function object_is_ancestor(_ind1: any, _ind2: any, ): any;
declare function object_name(_ind: any, ): any;
declare function effect_create_below(_kind: any, _x: any, _y: any, _size: any, _color: any, ): any;
declare function effect_create_above(_kind: any, _x: any, _y: any, _size: any, _color: any, ): any;
declare function effect_clear(): any;
declare function part_system_create_layer(_layerid: any, _persistent: any, _partsys: any, ): any;
declare function part_system_get_layer(_ind: any, ): any;
declare function part_system_layer(_ind: any, _layerid: any, ): any;
declare function part_system_create(_partsys: any, ): any;
declare function part_system_destroy(_ps: any, ): any;
declare function part_system_exists(_ps: any, ): any;
declare function part_system_clear(_ps: any, ): any;
declare function part_system_draw_order(_ps: any, _oldtonew: any, ): any;
declare function part_system_depth(_ps: any, _depth: any, ): any;
declare function part_system_position(_ps: any, _x: any, _y: any, ): any;
declare function part_system_automatic_update(_ps: any, _automatic: any, ): any;
declare function part_system_automatic_draw(_ps: any, _automatic: any, ): any;
declare function part_system_update(_ps: any, ): any;
declare function part_system_drawit(_ps: any, _color: any, _alpha: any, ): any;
declare function part_particles_create(_ps: any, _x: any, _y: any, _parttype: any, _numb: any, ): any;
declare function part_particles_create_color(_ps: any, _x: any, _y: any, _parttype: any, _col: any, _numb: any, ): any;
declare function part_particles_create_colour(_ps: any, _x: any, _y: any, _parttype: any, _col: any, _numb: any, ): any;
declare function part_particles_clear(_ps: any, ): any;
declare function part_particles_count(_ps: any, ): any;
declare function part_type_create(): any;
declare function part_type_destroy(_ind: any, ): any;
declare function part_type_exists(_ind: any, ): any;
declare function part_type_clear(_ind: any, ): any;
declare function part_type_shape(_ind: any, _shape: any, ): any;
declare function part_type_sprite(_ind: any, _sprite: any, _anim: any, _stretch: any, _rand: any, ): any;
declare function part_type_size(_ind: any, _sizemin: any, _sizemax: any, _sizeincr: any, _sizerand: any, ): any;
declare function part_type_scale(_ind: any, _xscale: any, _yscale: any, ): any;
declare function part_type_blend(_ind: any, _additive: any, ): any;
declare function part_type_color1(_ind: any, _colstart: any, ): any;
declare function part_type_colour1(_ind: any, _colstart: any, ): any;
declare function part_type_color2(_ind: any, _colstart: any, _colend: any, ): any;
declare function part_type_colour2(_ind: any, _colstart: any, _colend: any, ): any;
declare function part_type_color3(_ind: any, _colstart: any, _colmiddle: any, _colend: any, ): any;
declare function part_type_colour3(_ind: any, _colstart: any, _colmiddle: any, _colend: any, ): any;
declare function part_type_color(_ind: any, _colstart: any, _colmiddle: any, _colend: any, ): any;
declare function part_type_colour(_ind: any, _colstart: any, _colmiddle: any, _colend: any, ): any;
declare function part_type_color_mix(_ind: any, _col1: any, _col2: any, ): any;
declare function part_type_colour_mix(_ind: any, _col1: any, _col2: any, ): any;
declare function part_type_color_rgb(_ind: any, _rmin: any, _rmax: any, _gmin: any, _gmax: any, _bmin: any, _bmax: any, ): any;
declare function part_type_colour_rgb(_ind: any, _rmin: any, _rmax: any, _gmin: any, _gmax: any, _bmin: any, _bmax: any, ): any;
declare function part_type_color_hsv(_ind: any, _hmin: any, _hmax: any, _smin: any, _smax: any, _vmin: any, _vmax: any, ): any;
declare function part_type_colour_hsv(_ind: any, _hmin: any, _hmax: any, _smin: any, _smax: any, _vmin: any, _vmax: any, ): any;
declare function part_type_alpha1(_ind: any, _alphastart: any, ): any;
declare function part_type_alpha2(_ind: any, _alphastart: any, _alphaend: any, ): any;
declare function part_type_alpha3(_ind: any, _alphastart: any, _alphamiddle: any, _alphaend: any, ): any;
declare function part_type_life(_ind: any, _lifemin: any, _lifemax: any, ): any;
declare function part_type_step(_ind: any, _stepnumber: any, _steptype: any, ): any;
declare function part_type_death(_ind: any, _deathnumber: any, _deathtype: any, ): any;
declare function part_type_orientation(_ind: any, _angmin: any, _angmax: any, _angincr: any, _angrand: any, _angdir: any, ): any;
declare function part_type_speed(_ind: any, _spmin: any, _spmax: any, _spincr: any, _sprand: any, ): any;
declare function part_type_direction(_ind: any, _dirmin: any, _dirmax: any, _dirincr: any, _dirrand: any, ): any;
declare function part_type_gravity(_ind: any, _grav: any, _gravdir: any, ): any;
declare function part_emitter_create(_ps: any, ): any;
declare function part_emitter_destroy(_ps: any, _ind: any, ): any;
declare function part_emitter_destroy_all(_ps: any, ): any;
declare function part_emitter_exists(_ps: any, _ind: any, ): any;
declare function part_emitter_clear(_ps: any, _ind: any, ): any;
declare function part_emitter_region(_ps: any, _ind: any, _xmin: any, _xmax: any, _ymin: any, _ymax: any, _shape: any, _posdistr: any, ): any;
declare function part_emitter_burst(_ps: any, _ind: any, _ptype: any, _numb: any, ): any;
declare function part_emitter_stream(_ps: any, _ind: any, _ptype: any, _numb: any, ): any;
declare function path_exists(_ind: any, ): any;
declare function path_get_name(_ind: any, ): any;
declare function path_get_length(_ind: any, ): any;
declare function path_get_kind(_ind: any, ): any;
declare function path_get_closed(_ind: any, ): any;
declare function path_get_precision(_ind: any, ): any;
declare function path_get_number(_ind: any, ): any;
declare function path_get_point_x(_ind: any, _n: any, ): any;
declare function path_get_point_y(_ind: any, _n: any, ): any;
declare function path_get_point_speed(_ind: any, _n: any, ): any;
declare function path_get_x(_ind: any, _pos: any, ): any;
declare function path_get_y(_ind: any, _pos: any, ): any;
declare function path_get_speed(_ind: any, _pos: any, ): any;
declare function path_set_kind(_ind: any, _kind: any, ): any;
declare function path_set_closed(_ind: any, _closed: any, ): any;
declare function path_set_precision(_ind: any, _prec: any, ): any;
declare function path_add(): any;
declare function path_duplicate(_ind: any, ): any;
declare function path_assign(_ind: any, _path: any, ): any;
declare function path_start(_inst: any, _path: any, _speed: any, _endaction: any, _absolute: any, ): any;
declare function path_end(_inst: any, ): any;
declare function sys_draw_path(_id: any, _xoff: any, _yoff: any, _absolute: any, ): any;
declare function path_shift(_id: any, _xoff: any, _yoff: any, ): any;
declare function path_rescale(_id: any, _xscale: any, _yscale: any, ): any;
declare function path_rotate(_id: any, _angle: any, ): any;
declare function path_reverse(_id: any, ): any;
declare function path_flip(_id: any, ): any;
declare function path_mirror(_id: any, ): any;
declare function path_change_point(_id: any, _ind: any, _xx: any, _yy: any, _speed: any, ): any;
declare function path_delete(_ind: any, ): any;
declare function path_append(_ind: any, _path: any, ): any;
declare function path_add_point(_ind: any, _x: any, _y: any, _speed: any, ): any;
declare function path_insert_point(_ind: any, _n: any, _x: any, _y: any, _speed: any, ): any;
declare function path_delete_point(_ind: any, _n: any, ): any;
declare function path_clear_points(_ind: any, ): any;
declare function draw_path(_id: any, _xoff: any, _yoff: any, _absolute: any, ): any;
declare function physics_world_create(_pixelToMetreScale: any, ): any;
declare function physics_world_draw_debug(_flags: any, ): any;
declare function physics_world_gravity(_gx: any, _gy: any, ): any;
declare function physics_world_update_speed(_speed: any, ): any;
declare function physics_world_update_iterations(_iterations: any, ): any;
declare function physics_pause_enable(_pause: any, ): any;
declare function physics_fixture_create(): any;
declare function physics_fixture_set_kinematic(_fixtureID: any, ): any;
declare function physics_fixture_set_density(_fixtureID: any, _density: any, ): any;
declare function physics_fixture_set_restitution(_fixtureID: any, _restitution: any, ): any;
declare function physics_fixture_set_friction(_fixtureID: any, _friction: any, ): any;
declare function physics_fixture_set_collision_group(_fixtureID: any, _group: any, ): any;
declare function physics_fixture_set_sensor(_fixtureID: any, _sensorState: any, ): any;
declare function physics_fixture_set_linear_damping(_fixtureID: any, _damping: any, ): any;
declare function physics_fixture_set_angular_damping(_fixtureID: any, _damping: any, ): any;
declare function physics_fixture_set_awake(_fixtureID: any, _awake: any, ): any;
declare function physics_fixture_set_circle_shape(_fixtureID: any, _circleRadius: any, ): any;
declare function physics_fixture_set_box_shape(_fixtureID: any, _halfWidth: any, _halfHeight: any, ): any;
declare function physics_fixture_set_edge_shape(_fixtureID: any, v1x: any, v1y: any, v2x: any, v2y: any, ): any;
declare function physics_fixture_set_polygon_shape(_fixtureID: any, ): any;
declare function physics_fixture_set_chain_shape(_fixtureID: any, _loop: any, ): any;
declare function physics_fixture_add_point(_fixtureID: any, _local_x: any, _local_y: any, ): any;
declare function physics_fixture_bind_ext(_inst: any, _fixtureID: any, _id: any, _xo: any, _yo: any, ): any;
declare function physics_fixture_bind(_inst: any, _fixtureID: any, _id: any, _xoffs: any, _yoffs: any, ): any;
declare function physics_fixture_delete(_fixtureID: any, ): any;
declare function physics_joint_distance_create(_inst1: any, _inst2: any, _world_anchor_1_x: any, _world_anchor_1_y: any, _world_anchor_2_x: any, _world_anchor_2_y: any, _collideInstances: any, ): any;
declare function physics_joint_rope_create(_inst1: any, _inst2: any, _world_anchor_1_x: any, _world_anchor_1_y: any, _world_anchor_2_x: any, _world_anchor_2_y: any, _maxLength: any, _collideInstances: any, ): any;
declare function physics_joint_revolute_create(_inst1: any, _inst2: any, _world_anchor_x: any, _world_anchor_y: any, _lower_angle_limit: any, _upper_angle_limit: any, _enable_limit: any, _max_motor_torque: any, _motor_speed: any, _enable_motor: any, _collideInstances: any, ): any;
declare function physics_joint_prismatic_create(_inst1: any, _inst2: any, _world_anchor_x: any, _world_anchor_y: any, _world_axis_x: any, _world_axis_y: any, _lower_translation_limit: any, _upper_translation_limit: any, _enable_limit: any, _max_motor_force: any, _motor_speed: any, _enable_motor: any, _collideInstances: any, ): any;
declare function physics_joint_pulley_create(_inst1: any, _inst2: any, _world_anchor_1_x: any, _world_anchor_1_y: any, _world_anchor_2_x: any, _world_anchor_2_y: any, _local_anchor_1_x: any, _local_anchor_1_y: any, _local_anchor_2_x: any, _local_anchor_2_y: any, _ratio: any, _collideInstances: any, ): any;
declare function physics_joint_wheel_create(_inst1: any, _inst2: any, _anchor_x: any, _anchor_y: any, _axis_x: any, _axis_y: any, _enableMotor: any, _max_motor_torque: any, _motor_speed: any, _freq_hz: any, _damping_ratio: any, _collideInstances: any, ): any;
declare function physics_joint_weld_create(_inst1: any, _inst2: any, _anchor_x: any, _anchor_y: any, _ref_angle: any, _freq_hz: any, _damping_ratio: any, _collideInstances: any, ): any;
declare function physics_joint_friction_create(_inst1: any, _inst2: any, _anchor_x: any, _anchor_y: any, _max_force: any, _max_torque: any, _collideInstances: any, ): any;
declare function physics_joint_gear_create(_inst1: any, _inst2: any, _joint1: any, _joint2: any, _ratio: any, ): any;
declare function physics_joint_enable_motor(_joint: any, _motorState: any, ): any;
declare function physics_joint_get_value(_joint: any, _field: any, ): any;
declare function physics_joint_set_value(_joint: any, _field: any, _value: any, ): any;
declare function physics_joint_delete(_jointID: any, ): any;
declare function physics_apply_force(_pInst: any, _xpos: any, _ypos: any, _xforce: any, _yforce: any, ): any;
declare function physics_apply_impulse(_pInst: any, _xpos: any, _ypos: any, _ximpulse: any, _yimpulse: any, ): any;
declare function physics_apply_local_force(_pInst: any, _xlocal: any, _ylocal: any, _xforce_local: any, _yforce_local: any, ): any;
declare function physics_apply_local_impulse(_pInst: any, _xlocal: any, _ylocal: any, _ximpulse_local: any, _yimpulse_local: any, ): any;
declare function physics_apply_angular_impulse(_pInst: any, _impulse: any, ): any;
declare function physics_apply_torque(_pInst: any, _torque: any, ): any;
declare function physics_mass_properties(_pInst: any, _mass: any, _local_centre_of_mass_x: any, _local_centre_of_mass_y: any, _inertia: any, ): any;
declare function physics_draw_debug(_pInst: any, ): any;
declare function physics_test_overlap(_inst: any, _x: any, _y: any, _angle: any, _obj: any, ): any;
declare function physics_remove_fixture(_inst: any, _fixtureIndex: any, ): any;
declare function physics_get_friction(_inst: any, _fixtureIndex: any, ): any;
declare function physics_get_density(_inst: any, _fixtureIndex: any, ): any;
declare function physics_get_restitution(_inst: any, _fixtureIndex: any, ): any;
declare function physics_set_friction(_inst: any, _fixtureIndex: any, _val: any, ): any;
declare function physics_set_density(_inst: any, _fixtureIndex: any, _val: any, ): any;
declare function physics_set_restitution(_inst: any, _fixtureIndex: any, _val: any, ): any;
declare function physics_particle_create(typeflags: any, x: any, y: any, xv: any, yv: any, col: any, alpha: any, category: any, ): any;
declare function physics_particle_delete(ind: any, ): any;
declare function physics_particle_delete_region_circle(x: any, y: any, radius: any, ): any;
declare function physics_particle_delete_region_box(x: any, y: any, halfWidth: any, halfHeight: any, ): any;
declare function physics_particle_delete_region_poly(pointList: any, ): any;
declare function physics_particle_group_begin(typeflags: any, groupflags: any, x: any, y: any, ang: any, xv: any, yv: any, omega: any, col: any, alpha: any, strength: any, category: any, ): any;
declare function physics_particle_group_circle(radius: any, ): any;
declare function physics_particle_group_box(halfWidth: any, halfHeight: any, ): any;
declare function physics_particle_group_polygon(): any;
declare function physics_particle_group_add_point(x: any, y: any, ): any;
declare function physics_particle_group_end(): any;
declare function physics_particle_group_join(to: any, from: any, ): any;
declare function physics_particle_group_delete(ind: any, ): any;
declare function physics_particle_draw(typemask: any, category: any, sprite: any, subimg: any, ): any;
declare function physics_particle_draw_ext(typemask: any, category: any, sprite: any, subimg: any, xscale: any, yscale: any, angle: any, col: any, alpha: any, ): any;
declare function physics_particle_count(): any;
declare function physics_particle_get_data(buffer: any, dataFlags: any, ): any;
declare function physics_particle_get_max_count(): any;
declare function physics_particle_get_radius(): any;
declare function physics_particle_get_density(): any;
declare function physics_particle_get_damping(): any;
declare function physics_particle_get_gravity_scale(): any;
declare function physics_particle_set_max_count(count: any, ): any;
declare function physics_particle_set_radius(radius: any, ): any;
declare function physics_particle_set_density(density: any, ): any;
declare function physics_particle_set_damping(damping: any, ): any;
declare function physics_particle_set_gravity_scale(scale: any, ): any;
declare function physics_particle_set_flags(_ind: any, _typeflags: any, ): any;
declare function physics_particle_set_category_flags(_category: any, _typeflags: any, ): any;
declare function physics_particle_set_group_flags(_group: any, _flags: any, ): any;
declare function physics_particle_get_group_flags(_group: any, ): any;
declare function physics_particle_get_data_particle(ind: any, buffer: any, dataFlags: any, ): any;
declare function physics_particle_group_count(group: any, ): any;
declare function physics_particle_group_get_data(group: any, buffer: any, dataFlags: any, ): any;
declare function physics_particle_group_get_mass(group: any, ): any;
declare function physics_particle_group_get_inertia(group: any, ): any;
declare function physics_particle_group_get_centre_x(group: any, ): any;
declare function physics_particle_group_get_centre_y(group: any, ): any;
declare function physics_particle_group_get_vel_x(group: any, ): any;
declare function physics_particle_group_get_vel_y(group: any, ): any;
declare function physics_particle_group_get_ang_vel(group: any, ): any;
declare function physics_particle_group_get_x(group: any, ): any;
declare function physics_particle_group_get_y(group: any, ): any;
declare function physics_particle_group_get_angle(group: any, ): any;
declare function room_exists(_ind: any, ): any;
declare function room_get_name(_ind: any, ): any;
declare function room_name(_ind: any, ): any;
declare function room_set_width(_ind: any, _w: any, ): any;
declare function room_set_height(_ind: any, _h: any, ): any;
declare function room_set_persistent(_ind: any, _val: any, ): any;
declare function room_set_background_color(_ind: any, _colour: any, _show: any, ): any;
declare function room_get_camera(_roomindex: any, _viewindex: any, ): any;
declare function room_set_camera(_roomindex: any, _viewindex: any, _camid: any, ): any;
declare function room_get_viewport(_roomindex: any, _viewindex: any, ): any;
declare function room_set_viewport(_roomindex: any, _viewindex: any, _visible: any, _xport: any, _yport: any, _wport: any, _hport: any, ): any;
declare function room_set_view_enabled(_ind: any, _val: any, ): any;
declare function room_add(): any;
declare function room_duplicate(_ind: any, ): any;
declare function room_assign(_ind: any, _room: any, ): any;
declare function room_instance_add(_ind: any, _x: any, _y: any, _obj: any, ): any;
declare function room_instance_clear(_ind: any, ): any;
declare function room_goto_next(): any;
declare function room_restart(): any;
declare function room_goto(_room: any, ): any;
declare function room_goto_previous(): any;
declare function room_previous(_numb: any, ): any;
declare function room_next(_numb: any, ): any;
declare function game_end(): any;
declare function game_restart(): any;
declare function room_set_background_colour(_ind: any, _colour: any, _show: any, ): any;
declare function GetSequenceFromRValue(_val: any, ): any;
declare function sequence_create(): any;
declare function sequence_destroy(_sequenceOrId: any, ): any;
declare function sequence_get(_sequenceId: any, ): any;
declare function sequence_exists(_sequenceStructOrId: any, ): any;
declare function sequence_keyframestore_new(_type: any, ): any;
declare function sequence_keyframe_new(_type: any, ): any;
declare function sequence_keyframedata_new(_type: any, ): any;
declare function sequence_track_new(_type: any, ): any;
declare function sequence_get_objects(_sequenceOrId: any, ): any;
declare function sequence_instance_override_object(_inst: any, _objectID: any, _instanceID: any, ): any;
declare function Shader_Find(name: any, ): any;
declare function texture_get_texel_width(_tex: any, ): any;
declare function texture_get_texel_height(_tex: any, ): any;
declare function texture_set_stage(_stage: any, _texture: any, ): any;
declare function shaders_are_supported(): any;
declare function shader_is_compiled(_shaderIndex: any, ): any;
declare function shader_set(_shaderIndex: any, ): any;
declare function shader_reset(): any;
declare function shader_current(): any;
declare function shader_get_uniform(_shaderIndex: any, _constName: any, ): any;
declare function shader_set_uniform_i(): any;
declare function shader_set_uniform_f(): any;
declare function shader_set_uniform_i1(): any;
declare function shader_set_uniform_matrix(): any;
declare function shader_get_sampler_index(_shaderIndex: any, _texture: any, ): any;
declare function shader_enable_corner_id(_on_off: any, ): any;
declare function shader_set_uniform_i_array(_handle: any, _array: any, ): any;
declare function shader_set_uniform_f_array(_handle: any, _array: any, ): any;
declare function shader_set_uniform_f_buffer(_handle: any, _buffer: any, _offset: any, _count: any, ): any;
declare function shader_set_uniform_matrix_array(_handle: any, _array: any, ): any;
declare function shader_get_name(_index: any, ): any;
declare function fn_texture_get_texel_width(): any;
declare function fn_texture_get_texel_height(): any;
declare function fn_texture_set_stage(): any;
declare function fn_shader_is_compiled(): any;
declare function fn_shader_set(): any;
declare function fn_shader_get_uniform(): any;
declare function fn_shader_set_uniform_i(): any;
declare function fn_shader_set_uniform_f(): any;
declare function fn_shader_set_uniform_matrix(): any;
declare function fn_shader_get_sampler_index(): any;
declare function fn_shader_enable_corner_id(): any;
declare function fn_shader_set_uniform_i_array(): any;
declare function fn_shader_set_uniform_f_array(): any;
declare function fn_shader_set_uniform_f_buffer(): any;
declare function fn_shader_set_uniform_matrix_array(): any;
declare function fn_shader_get_name(index: any, ): any;
declare function audio_update(): any;
declare function audio_reinit(): any;
declare function Audio_Init(): any;
declare function Audio_Quit(): any;
declare function Audio_GetBusType(): any;
declare function Audio_CreateBus(): any;
declare function Audio_CreateMainBus(): any;
declare function Audio_IsMainBusInitialised(): any;
declare function audioSampleData(): any;
declare function audioSound(_props: any, ): any;
declare function GetAudioSoundFromHandle(_handle: any, ): any;
declare function IsSoundStreamed(soundid: any, ): any;
declare function IsSoundBuffered(soundid: any, ): any;
declare function IsSoundQueued(soundid: any, ): any;
declare function getUrlForSound(_soundid: any, ): any;
declare function Audio_ContextExists(): any;
declare function Audio_IsPlaybackAllowed(): any;
declare function Audio_IsPlaybackAllowedInState(_audioEngineState: any, ): any;
declare function Audio_GetEngineState(): any;
declare function Audio_WebAudioContextTryUnlock(): any;
declare function Audio_EngineReportState(): any;
declare function audio_system_is_available(): any;
declare function audio_system_is_initialised(): any;
declare function audio_sound_is_playable(_soundId: any, ): any;
declare function getFreeVoice(_props: any, ): any;
declare function Audio_GetSound(soundid: any, ): any;
declare function Audio_GetEmitterOrThrow(_emitterIndex: any, ): any;
declare function audio_play_sound_common(_props: any, ): any;
declare function audio_play_sound(_asset_index: any, _priority: any, _loop: any, _gain: any, _offset: any, _pitch: any, ): any;
declare function audio_play_sound_on(_emitter_index: any, _asset_index: any, _loop: any, _priority: any, _gain: any, _offset: any, _pitch: any, ): any;
declare function audio_play_sound_at(_asset_index: any, _x: any, _y: any, _z: any, _falloff_ref: any, _falloff_max: any, _falloff_fac: any, _loop: any, _priority: any, _gain: any, _offset: any, _pitch: any, ): any;
declare function audio_play_sound_ext(_params: any, ): any;
declare function audio_stop_sound(_soundid: any, ): any;
declare function audio_pause_sound(_soundid: any, ): any;
declare function audio_resume_sound(_soundid: any, ): any;
declare function audio_play_music(_soundid: any, _bLoop: any, ): any;
declare function audio_stop_music(): any;
declare function audio_pause_music(): any;
declare function audio_resume_music(): any;
declare function audio_music_is_playing(): any;
declare function audio_exists(_id: any, ): any;
declare function audio_sound_get_pitch(_soundid: any, ): any;
declare function audio_sound_pitch(_soundid: any, _pitch: any, ): any;
declare function audio_sound_get_gain(_index: any, ): any;
declare function audio_sound_gain(_index: any, _gain: any, _timeMs: any, ): any;
declare function audio_music_gain(level: any, time: any, ): any;
declare function handleVisibilityChange(): any;
declare function audio_sound_length(_soundid: any, ): any;
declare function audio_sound_get_track_position(_soundid: any, ): any;
declare function audio_sound_set_track_position(_soundid: any, _time: any, ): any;
declare function audio_sound_loop(_voiceIndex: any, _state: any, ): any;
declare function audio_sound_get_loop(_voiceIndex: any, ): any;
declare function audio_sound_loop_start(_index: any, _offsetSecs: any, ): any;
declare function audio_sound_get_loop_start(_index: any, ): any;
declare function audio_sound_loop_end(_index: any, _offsetSecs: any, ): any;
declare function audio_sound_get_loop_end(_index: any, ): any;
declare function audio_system(): any;
declare function audio_emitter_exists(_emitterIndex: any, ): any;
declare function audio_get_type(_soundid: any, ): any;
declare function audio_get_name(_index: any, ): any;
declare function audio_falloff_set_model(_model: any, ): any;
declare function audio_pause_all_opt(_bSystemPause: any, ): any;
declare function audio_stop_all(): any;
declare function audio_group_stop_sounds(_groupId: any, ): any;
declare function audio_pause_all(): any;
declare function audio_resume_all(): any;
declare function audio_resume_all_opt(_bSystemPause: any, ): any;
declare function audio_is_paused(_soundid: any, ): any;
declare function audio_is_playing(_soundid: any, ): any;
declare function audio_listener_position(_one: any, _two: any, _three: any, ): any;
declare function audio_listener_velocity(_one: any, _two: any, _three: any, ): any;
declare function audio_listener_orientation(_one: any, _two: any, _three: any, _four: any, _five: any, _six: any, ): any;
declare function audio_listener_set_position(_listenerId: any, _x: any, _y: any, _z: any, ): any;
declare function audio_listener_set_velocity(_listenerId: any, _vx: any, _vy: any, _vz: any, ): any;
declare function audio_listener_set_orientation(_listenerId: any, _lookat_x: any, _lookat_y: any, _lookat_z: any, _up_x: any, _up_y: any, _up_z: any, ): any;
declare function audio_listener_get_data(_listenerId: any, ): any;
declare function audio_emitter_position(_emitterIndex: any, _x: any, _y: any, _z: any, ): any;
declare function audio_emitter_get_x(_emitterIndex: any, ): any;
declare function audio_emitter_get_y(_emitterIndex: any, ): any;
declare function audio_emitter_get_z(_emitterIndex: any, ): any;
declare function audio_emitter_create(): any;
declare function audio_emitter_free(_emitterIndex: any, ): any;
declare function audio_master_gain(_one: any, ): any;
declare function audio_set_master_gain(_listenerId: any, _gain: any, ): any;
declare function audio_get_master_gain(_listenerId: any, ): any;
declare function audio_emitter_gain(_emitterIndex: any, _gain: any, ): any;
declare function audio_emitter_get_gain(_emitterIndex: any, ): any;
declare function audio_emitter_pitch(_emitterIndex: any, _pitch: any, ): any;
declare function audio_emitter_get_pitch(_emitterIndex: any, ): any;
declare function audio_emitter_falloff(_emitterIndex: any, _falloffRef: any, _falloffMax: any, _falloffFactor: any, ): any;
declare function audio_channel_num(_num_channels: any, ): any;
declare function audio_sound_get_listener_mask(_voiceIndex: any, ): any;
declare function audio_emitter_get_listener_mask(_emitterIndex: any, ): any;
declare function audio_get_listener_mask(): any;
declare function audio_get_listener_count(): any;
declare function audio_get_listener_info(index: any, ): any;
declare function audio_debug(trueFalse: any, ): any;
declare function Audio_SoundError(e: any, ): any;
declare function Audio_SoundLoad(e: any, ): any;
declare function Audio_StreamedSoundPreloaded(_event: any, ): any;
declare function Audio_PrepareStream(_url: any, _id: any, _name: any, _ext: any, ): any;
declare function Audio_SoundReadyStateChange(e: any, ): any;
declare function Audio_SoundProgress(e: any, ): any;
declare function AudioManager_GetPreloadRequest(_url: any, _ext: any, ): any;
declare function AudioManager_AddRawSound(_url: any, _id: any, _name: any, _ext: any, _pGroup: any, ): any;
declare function AudioManager_AddStreamedSoundAsRaw(_url: any, _id: any, _name: any, _ext: any, ): any;
declare function yyAudioGroup(_groupId: any, ): any;
declare function GroupOnSoundLoad(e: any, ): any;
declare function GroupOnSoundLoadError(e: any, ): any;
declare function Audio_InitSampleData(): any;
declare function AudioGroups_Init(): any;
declare function audio_group_load(_groupId: any, ): any;
declare function audio_group_unload(_groupId: any, ): any;
declare function audio_group_is_loaded(_groupId: any, ): any;
declare function audio_group_load_progress(_groupId: any, ): any;
declare function audio_group_name(_groupId: any, ): any;
declare function audio_group_stop_all(_groupId: any, ): any;
declare function audio_group_set_gain(_groupId: any, _gain: any, _timeMs: any, ): any;
declare function audio_group_get_gain(_groupId: any, ): any;
declare function audio_group_get_assets(_groupIndex: any, ): any;
declare function audio_sound_get_audio_group(_soundIndex: any, ): any;
declare function audio_create_stream(_filename: any, ): any;
declare function audio_destroy_stream(_soundid: any, ): any;
declare function allocateBufferSound(): any;
declare function endian_swap_u32(swapme: any, ): any;
declare function endian_swap_u16(swapme: any, ): any;
declare function audio_create_buffer_sound(_bufferId: any, _bufferFormat: any, _sampleRate: any, _offset: any, _length: any, _channels: any, ): any;
declare function audio_free_buffer_sound(_soundId: any, ): any;
declare function allocateQueueSound(): any;
declare function audio_create_play_queue(_format: any, _sampleRate: any, _channels: any, ): any;
declare function audio_queue_sound(_queueId: any, _bufferId: any, _offset: any, _len: any, ): any;
declare function audio_free_play_queue(_queueId: any, ): any;
declare function audio_get_recorder_count(): any;
declare function audio_get_recorder_info(_index: any, ): any;
declare function audio_start_recording(_deviceNum: any, ): any;
declare function audio_stop_recording(_deviceNum: any, ): any;
declare function audio_bus_create(): any;
declare function audio_effect_create(_type: any, _params: any, ): any;
declare function audio_emitter_bus(_emitterIndex: any, _bus: any, ): any;
declare function audio_emitter_get_bus(_emitterIndex: any, ): any;
declare function audio_bus_get_emitters(_bus: any, ): any;
declare function audio_bus_clear_emitters(_bus: any, ): any;
declare function sound_play(_index: any, ): any;
declare function sound_loop(_index: any, ): any;
declare function sound_stop(_index: any, ): any;
declare function sound_stop_all(): any;
declare function sound_isplaying(_index: any, ): any;
declare function sound_volume(_index: any, _value: any, ): any;
declare function sound_global_volume(_value: any, ): any;
declare function sound_fade(_index: any, _value: any, _time: any, ): any;
declare function sound_exists(_id: any, ): any;
declare function sound_get_kind(_resource_index: any, ): any;
declare function sound_get_name(_id: any, ): any;
declare function sound_name(_id: any, ): any;
declare function sound_add(_fname: any, _kind: any, _preload: any, ): any;
declare function sound_replace(_index: any, _fname: any, _kind: any, _preload: any, ): any;
declare function sound_delete(_index: any, ): any;
declare function sprite_exists(_index: any, ): any;
declare function sprite_get_width(_index: any, ): any;
declare function sprite_get_height(_index: any, ): any;
declare function sprite_get_name(_index: any, ): any;
declare function sprite_name(_index: any, ): any;
declare function sprite_get_number(_index: any, ): any;
declare function sprite_get_transparent(_index: any, ): any;
declare function sprite_get_xoffset(_index: any, ): any;
declare function sprite_get_yoffset(_index: any, ): any;
declare function sprite_get_bbox_left(_index: any, ): any;
declare function sprite_get_bbox_right(_index: any, ): any;
declare function sprite_get_bbox_top(_index: any, ): any;
declare function sprite_get_bbox_bottom(_index: any, ): any;
declare function sprite_get_bbox_mode(_index: any, ): any;
declare function sprite_set_offset(_index: any, _xoffset: any, _yoffset: any, ): any;
declare function sprite_set_bbox(_index: any, _left: any, _top: any, _right: any, _bottom: any, ): any;
declare function sprite_set_bbox_mode(_index: any, _mode: any, ): any;
declare function sprite_set_alpha_from_sprite(_dest: any, _src: any, ): any;
declare function sprite_add_from_screen_RELEASE(_ind: any, _x: any, _y: any, _w: any, _h: any, _removeback: any, _smooth: any, ): any;
declare function sprite_create_from_surface_RELEASE(_id: any, _x: any, _y: any, _w: any, _h: any, _removeback: any, _smooth: any, _xorig: any, _yorig: any, ): any;
declare function sprite_add_from_surface_RELEASE(_ind: any, _id: any, _x: any, _y: any, _w: any, _h: any, _removeback: any, _smooth: any, ): any;
declare function sprite_delete(_ind: any, ): any;
declare function sprite_save(_ind: any, _subimg: any, _fname: any, ): any;
declare function sprite_duplicate_RELEASE(_ind: any, ): any;
declare function sprite_add(_filename: any, _imgnumb: any, _removeback: any, _smooth: any, _xorig: any, _yorig: any, ): any;
declare function sprite_replace(_ind: any, _filename: any, _imgnumb: any, _removeback: any, _smooth: any, _xorig: any, _yorig: any, ): any;
declare function sprite_merge(_dest: any, _src: any, ): any;
declare function sprite_assign(_ind1: any, _ind2: any, ): any;
declare function sprite_collision_mask(_ind: any, _sepmasks: any, _bbmode: any, _bbleft: any, _bbtop: any, _bbright: any, _bbbottom: any, _kind: any, _tolerance: any, ): any;
declare function TMaskCreate(_merge: any, _pTPE: any, _bbmode: any, _bbox: any, _kind: any, _tolerance: any, ): any;
declare function sprite_set_cache_size(_ind: any, _max: any, ): any;
declare function sprite_set_cache_size_ext(_ind: any, _index: any, _max: any, ): any;
declare function sprite_get_tpe(_index: any, _subimage: any, ): any;
declare function sprite_get_texture(_spriteIndex: any, _frameIndex: any, ): any;
declare function sprite_get_uvs(_spriteIndex: any, _frameIndex: any, ): any;
declare function sprite_prefetch(_spriteIndex: any, ): any;
declare function sprite_prefetch_multi(_spriteArray: any, ): any;
declare function sprite_flush(_spriteIndex: any, ): any;
declare function sprite_flush_multi(_spriteArray: any, ): any;
declare function sprite_set_speed(_spriteIndex: any, _speed: any, _type: any, ): any;
declare function sprite_get_speed_type(_spriteIndex: any, ): any;
declare function sprite_get_speed(_spriteIndex: any, ): any;
declare function sprite_get_nineslice(_spriteIndex: any, ): any;
declare function sprite_set_nineslice(_spriteIndex: any, _nineSlice: any, ): any;
declare function sprite_nineslice_create(): any;
declare function sprite_get_info(_spriteIndex: any, ): any;
declare function sprite_add_from_screen(_ind: any, _x: any, _y: any, _w: any, _h: any, _removeback: any, _smooth: any, ): any;
declare function sprite_create_from_surface(_id: any, _x: any, _y: any, _w: any, _h: any, _removeback: any, _smooth: any, _xorig: any, _yorig: any, ): any;
declare function sprite_add_from_surface(_ind: any, _id: any, _x: any, _y: any, _w: any, _h: any, _removeback: any, _smooth: any, ): any;
declare function sprite_duplicate(_ind: any, ): any;
declare function ansi_char(_val: any, ): any;
declare function chr(_val: any, ): any;
declare function ord(_str: any, ): any;
declare function real(_v: any, ): any;
declare function bool(_v: any, ): any;
declare function __yy_StringReplacePlaceholders(_str: any, _values: any, ): any;
declare function string(_obj: any, ): any;
declare function string_ext(_str: any, _values: any, ): any;
declare function string_format(_val: any, _tot: any, _dec: any, ): any;
declare function string_length(_str: any, ): any;
declare function string_byte_length(_str: any, ): any;
declare function __yy_JSIndex2GMLIndex(str: any, jsIndex: any, ): any;
declare function __yy_GMLIndex2JSIndex(_str: any, _gmlIndex: any, ): any;
declare function string_pos(_substr: any, _str: any, ): any;
declare function string_pos_ext(_substr: any, _str: any, _startPos: any, ): any;
declare function string_last_pos(_substr: any, _str: any, ): any;
declare function string_last_pos_ext(_substr: any, _str: any, _startPos: any, ): any;
declare function string_copy(_str: any, _index: any, _count: any, ): any;
declare function string_char_at(_str: any, _index: any, ): any;
declare function string_ord_at(_str: any, _index: any, ): any;
declare function UTF16_to_UTF8(_str: any, ): any;
declare function UTF8_to_UTF16(data: any, ): any;
declare function string_byte_at(_str: any, _index: any, ): any;
declare function string_set_byte_at(_str: any, _index: any, _byte: any, ): any;
declare function string_delete(_str: any, _index: any, _count: any, ): any;
declare function string_insert(_substr: any, _str: any, _index: any, ): any;
declare function string_replace(_str: any, _substr: any, _newstr: any, ): any;
declare function string_replace_all(_str: any, _substr: any, _newstr: any, ): any;
declare function string_count(_substr: any, _str: any, ): any;
declare function string_hash_to_newline(_str: any, ): any;
declare function string_lower(_str: any, ): any;
declare function string_upper(_str: any, ): any;
declare function string_repeat(_str: any, _count: any, ): any;
declare function string_letters(_str: any, ): any;
declare function string_digits(_str: any, ): any;
declare function string_lettersdigits(_str: any, ): any;
declare function string_trim_start(_str: any, _substrs: any, ): any;
declare function string_trim_end(_str: any, _substrs: any, ): any;
declare function string_trim(_str: any, _substrs: any, ): any;
declare function string_starts_with(_str: any, _val: any, ): any;
declare function string_ends_with(_str: any, _val: any, ): any;
declare function __yy_StringSplit(input: any, separator: any, limit: any, ): any;
declare function string_split(_str: any, _delim: any, _removeEmpty: any, _maxSplits: any, ): any;
declare function string_split_ext(_str: any, _delims: any, _removeEmpty: any, _maxSplits: any, ): any;
declare function stringJoinDelimiter(_delim: any, _values: any, ): any;
declare function string_join(_delim: any, ): any;
declare function string_join_ext(_delim: any, _values: any, _offset: any, _length: any, ): any;
declare function string_concat(): any;
declare function string_concat_ext(_values: any, _offset: any, _length: any, ): any;
declare function __yy_CharCodeSize(_code: any, ): any;
declare function string_foreach(_str: any, _func: any, _pos: any, _length: any, ): any;
declare function surface_resize_RELEASE(_id: any, _w: any, _h: any, ): any;
declare function surface_depth_disable(_disable: any, ): any;
declare function surface_get_depth_disable(): any;
declare function surface_create_RELEASE(_w: any, _h: any, _format: any, _forceid: any, ): any;
declare function surface_create_ext(_name: any, _w: any, _h: any, _format: any, ): any;
declare function surface_free_RELEASE(_id: any, ): any;
declare function surface_exists(_id: any, ): any;
declare function surface_get_width(_id: any, ): any;
declare function surface_get_height(_id: any, ): any;
declare function surface_get_texture(_id: any, ): any;
declare function CheckForSurface(_id: any, ): any;
declare function surface_set_target_system_RELEASE(_id: any, ): any;
declare function surface_set_target_RELEASE(_id: any, ): any;
declare function surface_get_target(): any;
declare function surface_reset_target_RELEASE(): any;
declare function GetCanvasPixel(_buffer: any, _x: any, _y: any, ): any;
declare function surface_getpixel_RELEASE(_id: any, _x: any, _y: any, ): any;
declare function surface_getpixel_ext_RELEASE(_id: any, _x: any, _y: any, ): any;
declare function SaveCanvas(_buffer: any, _fname: any, ): any;
declare function surface_save(_id: any, _fname: any, ): any;
declare function surface_save_part(_id: any, _fname: any, _x: any, _y: any, _w: any, _h: any, ): any;
declare function draw_surface_RELEASE(_id: any, _x: any, _y: any, ): any;
declare function draw_surface_stretched(_id: any, _x: any, _y: any, _w: any, _h: any, ): any;
declare function draw_surface_tiled(_id: any, _x: any, _y: any, ): any;
declare function draw_surface_part(_id: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, ): any;
declare function draw_surface_ext(_id: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, _color: any, _alpha: any, ): any;
declare function draw_surface_stretched_ext(_id: any, _x: any, _y: any, _w: any, _h: any, _color: any, _alpha: any, ): any;
declare function draw_surface_tiled_ext_RELEASE(_id: any, _x: any, _y: any, _xscale: any, _yscale: any, _color: any, _alpha: any, ): any;
declare function draw_surface_part_ext(_id: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, _xscale: any, _yscale: any, _color: any, _alpha: any, ): any;
declare function draw_surface_general(_id: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function surface_copy(_destination: any, _x: any, _y: any, _source: any, ): any;
declare function surface_copy_part(_destination: any, _x: any, _y: any, _source: any, _xs: any, _ys: any, _ws: any, _hs: any, ): any;
declare function SurfaceFormatSupported(_format: any, ): any;
declare function TextureFormatSupported(_format: any, ): any;
declare function surface_format_is_supported(_format: any, ): any;
declare function surface_get_format(_id: any, ): any;
declare function surface_resize(_id: any, _w: any, _h: any, ): any;
declare function surface_create(_w: any, _h: any, _format: any, _forceid: any, ): any;
declare function surface_free(_id: any, ): any;
declare function surface_set_target_system(_id: any, ): any;
declare function surface_set_target(_id: any, ): any;
declare function surface_reset_target(): any;
declare function surface_getpixel(_id: any, _x: any, _y: any, ): any;
declare function surface_getpixel_ext(_id: any, _x: any, _y: any, ): any;
declare function draw_surface(_id: any, _x: any, _y: any, ): any;
declare function draw_surface_tiled_ext(_id: any, _x: any, _y: any, _xscale: any, _yscale: any, _color: any, _alpha: any, ): any;
declare function TagManager(): any;
declare function MakeTypeId(_assetType: any, _assetId: any, ): any;
declare function GetTypeIdParams(_assetNameId: any, _assetType: any, _fnName: any, ): any;
declare function tag_get_asset_ids(_tags: any, _assetType: any, ): any;
declare function tag_get_assets(_tags: any, ): any;
declare function asset_get_tags(_assetNameId: any, _assetType: any, ): any;
declare function asset_add_tags(_assetNameId: any, _tags: any, _assetType: any, ): any;
declare function asset_remove_tags(_assetNameId: any, _tags: any, _assetType: any, ): any;
declare function asset_has_tags(_assetNameId: any, _tags: any, _assetType: any, ): any;
declare function asset_has_any_tag(_assetNameId: any, _tags: any, _assetType: any, ): any;
declare function asset_clear_tags(_assetNameId: any, _assetType: any, ): any;
declare function draw_self(_inst: any, ): any;
declare function draw_sprite_ext(_pInst: any, _sprite: any, _sub_index: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, _col: any, _alpha: any, ): any;
declare function draw_sprite(_pInst: any, _sprite: any, _sub_index: any, _x: any, _y: any, ): any;
declare function draw_sprite_pos(_pInst: any, _sprite: any, _sub_index: any, _x1: any, _y1: any, _x2: any, _y2: any, _x3: any, _y3: any, _x4: any, _y4: any, _alpha: any, ): any;
declare function draw_sprite_stretched(_pInst: any, _sprite: any, _sub_index: any, _x: any, _y: any, _w: any, _h: any, ): any;
declare function draw_sprite_stretched_ext(_pInst: any, _sprite: any, _sub_index: any, _x: any, _y: any, _w: any, _h: any, _colour: any, _alpha: any, ): any;
declare function draw_sprite_part(_pInst: any, _sprite: any, _sub_index: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, ): any;
declare function draw_sprite_part_ext(_pInst: any, _sprite: any, _sub_index: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, _xscale: any, _yscale: any, _color: any, _alpha: any, ): any;
declare function draw_sprite_tiled(_pInst: any, _sprite: any, _sub_index: any, _x: any, _y: any, ): any;
declare function draw_sprite_tiled_ext(_pInst: any, _sprite: any, _sub_index: any, _x: any, _y: any, _xscale: any, _yscale: any, _color: any, _alpha: any, ): any;
declare function draw_sprite_general(_pInst: any, _sprite: any, _sub_index: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, _xscale: any, _yscale: any, _rot: any, _c1: any, _c2: any, _c3: any, _c4: any, _alpha: any, ): any;
declare function tile_add(_background: any, _left: any, _top: any, _width: any, _height: any, _x: any, _y: any, _depth: any, ): any;
declare function tile_delete(_id: any, ): any;
declare function tile_exists(_id: any, ): any;
declare function tile_get_x(_id: any, ): any;
declare function tile_get_y(_id: any, ): any;
declare function tile_get_left(_id: any, ): any;
declare function tile_get_top(_id: any, ): any;
declare function tile_get_width(_id: any, ): any;
declare function tile_get_height(_id: any, ): any;
declare function tile_get_depth(_id: any, ): any;
declare function tile_get_visible(_id: any, ): any;
declare function tile_get_xscale(_id: any, ): any;
declare function tile_get_yscale(_id: any, ): any;
declare function tile_get_background(_id: any, ): any;
declare function tile_get_blend(_id: any, ): any;
declare function tile_get_alpha(_id: any, ): any;
declare function tile_set_position(_id: any, _x: any, _y: any, ): any;
declare function tile_set_region(_id: any, _left: any, _top: any, _width: any, _height: any, ): any;
declare function tile_set_background(_id: any, _background: any, ): any;
declare function tile_set_visible(_id: any, _visible: any, ): any;
declare function tile_set_depth(_id: any, _depth: any, ): any;
declare function tile_set_scale(_id: any, _xscale: any, _yscale: any, ): any;
declare function tile_set_blend(_id: any, _colour: any, ): any;
declare function tile_set_alpha(_id: any, _alpha: any, ): any;
declare function tile_layer_hide(_depth: any, ): any;
declare function tile_layer_show(_depth: any, ): any;
declare function tile_layer_delete(_depth: any, ): any;
declare function tile_layer_shift(_depth: any, _x: any, _y: any, ): any;
declare function tile_layer_find(_depth: any, _x: any, _y: any, ): any;
declare function tile_layer_delete_at(_depth: any, _x: any, _y: any, ): any;
declare function tile_layer_depth(_depth: any, _newdepth: any, ): any;
declare function tile_get_count(): any;
declare function tile_get_id(_index: any, ): any;
declare function tile_get_ids(): any;
declare function tile_get_ids_at_depth(_depth: any, ): any;
declare function NonExistentError(_id: any, ): any;
declare function BuiltInResetError(): any;
declare function BuiltInStatelessError(): any;
declare function CreationError(): any;
declare function DestroyWithChildrenError(_id: any, ): any;
declare function BuiltInDestructionError(): any;
declare function BuiltInStopError(): any;
declare function IsConfigurable(_ts: any, ): any;
declare function IsReconfigurable(_ts: any, ): any;
declare function IsStateful(_ts: any, ): any;
declare function GetTimeSourceWithId(_id: any, ): any;
declare function time_source_create(_parent: any, _period: any, _units: any, _callback: any, _args: any, _reps: any, _expiryType: any, ): any;
declare function TimeSource_Create(_parent: any, _period: any, _units: any, _callback: any, _args: any, _reps: any, _expiryType: any, ): any;
declare function time_source_destroy(_id: any, _destroyTree: any, ): any;
declare function TimeSource_Destroy(_id: any, ): any;
declare function TimeSource_DestroyTree(_id: any, ): any;
declare function time_source_start(_id: any, ): any;
declare function TimeSource_Start(_id: any, ): any;
declare function time_source_stop(_id: any, ): any;
declare function TimeSource_Stop(_id: any, ): any;
declare function time_source_pause(_id: any, ): any;
declare function TimeSource_Pause(_id: any, ): any;
declare function time_source_resume(_id: any, ): any;
declare function TimeSource_Resume(_id: any, ): any;
declare function time_source_reset(_id: any, ): any;
declare function TimeSource_Reset(_id: any, ): any;
declare function time_source_reconfigure(_id: any, _period: any, _units: any, _callback: any, _args: any, _reps: any, _expiryType: any, ): any;
declare function TimeSource_Reconfigure(_id: any, _period: any, _units: any, _callback: any, _args: any, _reps: any, _expiryType: any, ): any;
declare function time_source_get_period(_id: any, ): any;
declare function TimeSource_GetPeriod(_id: any, ): any;
declare function time_source_get_reps_completed(_id: any, ): any;
declare function TimeSource_GetRepsCompleted(_id: any, ): any;
declare function time_source_get_reps_remaining(_id: any, ): any;
declare function TimeSource_GetRepsRemaining(_id: any, ): any;
declare function time_source_get_units(_id: any, ): any;
declare function TimeSource_GetUnits(_id: any, ): any;
declare function time_source_get_time_remaining(_id: any, ): any;
declare function TimeSource_GetTimeRemaining(_id: any, ): any;
declare function time_source_get_state(_id: any, ): any;
declare function TimeSource_GetState(_id: any, ): any;
declare function time_source_get_parent(_id: any, ): any;
declare function TimeSource_GetParent(_id: any, ): any;
declare function time_source_get_children(_id: any, ): any;
declare function TimeSource_GetChildren(_id: any, ): any;
declare function time_source_exists(_id: any, ): any;
declare function TimeSource_Exists(_id: any, ): any;
declare function time_seconds_to_bpm(_seconds: any, ): any;
declare function Time_SecondsToBPM(_seconds: any, ): any;
declare function time_bpm_to_seconds(_bpm: any, ): any;
declare function Time_BPMToSeconds(_bpm: any, ): any;
declare function call_later(_period: any, _units: any, _callback: any, _repeat: any, ): any;
declare function CallLater(_period: any, _units: any, _callback: any, _repeat: any, ): any;
declare function call_cancel(_handle: any, ): any;
declare function CallCancel(_handle: any, ): any;
declare function timeline_exists(_ind: any, ): any;
declare function timeline_get_name(_ind: any, ): any;
declare function timeline_name(_ind: any, ): any;
declare function timeline_add(): any;
declare function timeline_delete(_ind: any, ): any;
declare function timeline_clear(_ind: any, ): any;
declare function timeline_moment_add(_ind: any, _step: any, _codestr: any, ): any;
declare function timeline_moment_add_script(_ind: any, _step: any, _script: any, ): any;
declare function timeline_size(_ind: any, ): any;
declare function timeline_max_moment(_ind: any, ): any;
declare function timeline_moment_clear(_ind: any, _step: any, ): any;
declare function window_set_visible(_visible: any, ): any;
declare function window_handle(): any;
declare function window_device(): any;
declare function window_get_visible(): any;
declare function window_set_fullscreen(_full: any, ): any;
declare function window_get_fullscreen(): any;
declare function window_set_showborder(_show: any, ): any;
declare function window_get_showborder(): any;
declare function window_set_showicons(_show: any, ): any;
declare function window_get_showicons(): any;
declare function window_set_stayontop(_stay: any, ): any;
declare function window_get_stayontop(): any;
declare function window_set_sizeable(_sizeable: any, ): any;
declare function window_get_sizeable(): any;
declare function window_set_caption(_caption: any, ): any;
declare function window_set_min_width(_width: any, ): any;
declare function window_set_max_width(_width: any, ): any;
declare function window_set_min_height(_height: any, ): any;
declare function window_set_max_height(_height: any, ): any;
declare function window_get_caption(): any;
declare function EnableCursor(_on_off: any, _style: any, ): any;
declare function window_set_cursor(_curs: any, ): any;
declare function window_get_cursor(): any;
declare function window_set_color(_colour: any, ): any;
declare function window_get_color(): any;
declare function window_set_region_scale(_scale: any, _adaptwindow: any, ): any;
declare function window_get_region_scale(): any;
declare function window_set_position(_x: any, _y: any, _center: any, ): any;
declare function window_set_size(_w: any, _h: any, ): any;
declare function window_set_rectangle(_x: any, _y: any, _w: any, _h: any, ): any;
declare function window_center(): any;
declare function window_default(): any;
declare function window_get_x(): any;
declare function window_get_y(): any;
declare function window_get_width(): any;
declare function window_get_height(): any;
declare function window_get_visible_rects(): any;
declare function window_mouse_get_x(): any;
declare function window_mouse_get_y(): any;
declare function window_mouse_set(x: any, y: any, ): any;
declare function window_view_mouse_get_x(_id: any, ): any;
declare function window_view_mouse_get_y(_id: any, ): any;
declare function window_views_mouse_get_x(): any;
declare function window_views_mouse_get_y(): any;
declare function window_set_colour(_colour: any, ): any;
declare function window_get_colour(): any;
declare function aa_1241_kz(): any;
declare function SecurityCheck(): any;
declare function YYPushEventsDispatch(): any;
declare function code_is_compiled(): any;
declare function draw_enable_alphablend_html5(_on_off: any, ): any;
declare function achievement_available(): any;
declare function achievement_login(): any;
declare function achievement_logout(): any;
declare function achievement_login_status(): any;
declare function achievement_reset(): any;
declare function achievement_show_achievements(): any;
declare function achievement_show_leaderboards(): any;
declare function achievement_load_friends(): any;
declare function achievement_load_leaderboard(): any;
declare function achievement_get_pic(): any;
declare function achievement_load_progress(): any;
declare function achievement_send_challenge(): any;
declare function os_get_info(): any;
declare function achievement_event(): any;
declare function achievement_show(): any;
declare function achievement_get_info(): any;
declare function os_get_config(): any;
declare function YoYo_GetPlatform(): any;
declare function YoYo_GetDevice(): any;
declare function YoYo_GetBrowser(): any;
declare function YoYo_GetVersion(): any;
declare function url_open_full(_url: any, _target: any, _options: any, ): any;
declare function url_open_ext(_url: any, _target: any, ): any;
declare function url_open(_url: any, ): any;
declare function achievement_post_score(_scoreboard: any, _score: any, ): any;
declare function achievement_post(_scoreboard: any, _achivement: any, ): any;
declare function shop_leave_rating(_text: any, _yes: any, _no: any, _URL: any, ): any;
declare function virtual_key_add(_x: any, _y: any, _w: any, _h: any, _keycode: any, ): any;
declare function virtual_key_delete(_id: any, ): any;
declare function UpdateVirtualKeyDrawList(): any;
declare function virtual_key_show(_id: any, ): any;
declare function virtual_key_hide(_id: any, ): any;
declare function device_get_tilt_x(): any;
declare function device_get_tilt_y(): any;
declare function device_get_tilt_z(): any;
declare function device_ios_get_imagename(): any;
declare function device_ios_get_image(): any;
declare function openfeint_start(): any;
declare function achievement_map_achievement(_a: any, _b: any, ): any;
declare function achievement_map_leaderboard(_a: any, _b: any, _c: any, ): any;
declare function openfeint_send_challenge(_a: any, _b: any, _c: any, ): any;
declare function openfeint_send_invite(_a: any, ): any;
declare function openfeint_send_social(_a: any, _b: any, _c: any, ): any;
declare function openfeint_set_url(_a: any, ): any;
declare function openfeint_accept_challenge(): any;
declare function achievement_is_online(): any;
declare function openfeint_send_result(_a: any, _b: any, ): any;
declare function device_is_keypad_open(): any;
declare function YoYo_Init(): any;
declare function YoYo_SecurityFail(): any;
declare function YoYo_GetSessionKey(): any;
declare function YoYo_CheckSecurity(_url: any, ): any;
declare function url_get_domain(): any;
declare function getAsyncRequestObject(): any;
declare function device_mouse_check_button(_dev: any, _button: any, ): any;
declare function device_mouse_check_button_pressed(_dev: any, _button: any, ): any;
declare function device_mouse_check_button_released(_dev: any, _button: any, ): any;
declare function device_mouse_x(_dev: any, ): any;
declare function device_mouse_raw_x(_dev: any, ): any;
declare function device_mouse_y(_dev: any, ): any;
declare function device_mouse_raw_y(_dev: any, ): any;
declare function device_mouse_x_to_gui(_dev: any, ): any;
declare function device_mouse_y_to_gui(_dev: any, ): any;
declare function os_is_paused(): any;
declare function window_has_focus(): any;
declare function ds_exists(_ind: any, _type: any, ): any;
declare function script_exists(_ind: any, ): any;
declare function script_get_name(_ind: any, ): any;
declare function script_get(_ind: any, ): any;
declare function script_execute(_self: any, _other: any, _index: any, ): any;
declare function script_execute_ext(_self: any, _other: any, _index: any, _array: any, _offset: any, _length: any, ): any;
declare function gml_release_mode(_enable: any, ): any;
declare function application_surface_draw_enable(_enable: any, ): any;
declare function application_surface_enable(_enable: any, ): any;
declare function application_surface_is_enabled(): any;
declare function Get_FullScreenOffset(): any;
declare function application_get_position(): any;
declare function extension_stubfunc_real(): any;
declare function extension_stubfunc_string(): any;
declare function draw_enable_alphablend(_on_off: any, ): any;
declare function YoYo_AchievementsAvailable(): any;
declare function YoYo_LoginAchievements(): any;
declare function YoYo_LogoutAchievements(): any;
declare function YoYo_achievement_login_status(): any;
declare function YoYo_achievement_reset(): any;
declare function YoYo_achievement_show_achievements(): any;
declare function YoYo_achievement_show_leaderboards(): any;
declare function YoYo_achievement_load_friends(): any;
declare function YoYo_achievement_load_leaderboard(): any;
declare function YoYo_achievement_get_pic(): any;
declare function YoYo_achievement_load_progress(): any;
declare function YoYo_achievement_send_challenge(): any;
declare function YoYo_os_get_info(): any;
declare function YoYo_achievement_event(): any;
declare function YoYo_achievement_show(): any;
declare function YoYo_achievement_get_info(): any;
declare function YoYo_GetConfig(): any;
declare function YoYo_OpenURL_full(_url: any, _target: any, _options: any, ): any;
declare function YoYo_OpenURL_ext(_url: any, _target: any, ): any;
declare function YoYo_OpenURL(_url: any, ): any;
declare function YoYo_PostScore(_scoreboard: any, _score: any, ): any;
declare function YoYo_PostAchievement(_scoreboard: any, _achivement: any, ): any;
declare function YoYo_LeaveRating(_text: any, _yes: any, _no: any, _URL: any, ): any;
declare function get_timer(): any;
declare function YoYo_GetTimer(): any;
declare function YoYo_AddVirtualKey(_x: any, _y: any, _w: any, _h: any, _keycode: any, ): any;
declare function YoYo_DeleteVirtualKey(_id: any, ): any;
declare function YoYo_ShowVirtualKey(_id: any, ): any;
declare function YoYo_HideVirtualKey(_id: any, ): any;
declare function YoYo_GetTiltX(): any;
declare function YoYo_GetTiltY(): any;
declare function YoYo_GetTiltZ(): any;
declare function YoYo_SelectPicture(): any;
declare function YoYo_GetPictureSprite(): any;
declare function YoYo_OF_StartDashboard(): any;
declare function YoYo_OF_AddAchievement(_a: any, _b: any, ): any;
declare function YoYo_OF_AddLeaderboard(_a: any, _b: any, _c: any, ): any;
declare function YoYo_OF_SendChallenge(_a: any, _b: any, _c: any, ): any;
declare function YoYo_OF_SendInvite(_a: any, ): any;
declare function YoYo_OF_SendSocial(_a: any, _b: any, _c: any, ): any;
declare function YoYo_OF_SetURL(_a: any, ): any;
declare function YoYo_OF_AcceptChallenge(): any;
declare function YoYo_OF_IsOnline(): any;
declare function YoYo_OF_SendChallengeResult(_a: any, _b: any, ): any;
declare function YoYo_IsKeypadOpen(): any;
declare function YoYo_GetDomain(): any;
declare function YoYo_MouseCheckButton(_dev: any, _button: any, ): any;
declare function YoYo_MouseCheckButtonPressed(_dev: any, _button: any, ): any;
declare function YoYo_MouseCheckButtonReleased(_dev: any, _button: any, ): any;
declare function YoYo_MouseX(_dev: any, ): any;
declare function YoYo_MouseXRaw(_dev: any, ): any;
declare function YoYo_MouseY(_dev: any, ): any;
declare function YoYo_MouseYRaw(_dev: any, ): any;
declare function YoYo_OSPauseEvent(): any;
declare function YoYo_OSHasFocusEvent(): any;
declare function method_call(_self: any, _other: any, _index: any, _array: any, _offset: any, _length: any, ): any;
declare function ini_open_from_string(_content: any, ): any;
declare function ini_open(_file: any, ): any;
declare function ini_close(): any;
declare function ini_read_string(_section: any, _key: any, _default: any, ): any;
declare function ini_read_real(_section: any, _key: any, _default: any, ): any;
declare function ini_write_string(_section: any, _key: any, _value: any, ): any;
declare function ini_write_real(_section: any, _key: any, _value: any, ): any;
declare function ini_key_exists(_section: any, _key: any, ): any;
declare function ini_section_exists(_section: any, ): any;
declare function ini_key_delete(_section: any, _key: any, ): any;
declare function ini_section_delete(_section: any, ): any;
declare function ds_set_precision(_prec: any, ): any;
declare function yySaveGrid(): any;
declare function yyGrid(_w: any, _h: any, ): any;
declare function ds_grid_create(_w: any, _h: any, ): any;
declare function ds_grid_destroy(_id: any, ): any;
declare function ds_grid_copy(_id: any, _source: any, ): any;
declare function ds_grid_resize(_id: any, _w: any, _h: any, ): any;
declare function ds_grid_width(_id: any, ): any;
declare function ds_grid_height(_id: any, ): any;
declare function ds_grid_clear(_id: any, _val: any, ): any;
declare function ds_grid_set_DEBUG(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_set_RELEASE(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_set_pre_DEBUG(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_set_pre_RELEASE(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_set_post_DEBUG(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_set_post_RELEASE(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_add(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_multiply(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_set_region(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, _val: any, ): any;
declare function ds_grid_add_region(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, _val: any, ): any;
declare function ds_grid_multiply_region(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, _val: any, ): any;
declare function ds_grid_set_disk(_id: any, _x: any, _y: any, _r: any, _val: any, ): any;
declare function ds_grid_add_disk(_id: any, _x: any, _y: any, _r: any, _val: any, ): any;
declare function ds_grid_multiply_disk(_id: any, _x: any, _y: any, _r: any, _val: any, ): any;
declare function ds_grid_set_grid_region_Common(_id: any, _source: any, _x1: any, _y1: any, _x2: any, _y2: any, _xpos: any, _ypos: any, _call: any, ): any;
declare function ds_grid_set_grid_region(_id: any, _source: any, _x1: any, _y1: any, _x2: any, _y2: any, _xpos: any, _ypos: any, ): any;
declare function ds_grid_add_grid_region(_id: any, _source: any, _x1: any, _y1: any, _x2: any, _y2: any, _xpos: any, _ypos: any, ): any;
declare function ds_grid_multiply_grid_region(_id: any, _source: any, _x1: any, _y1: any, _x2: any, _y2: any, _xpos: any, _ypos: any, _val: any, ): any;
declare function ds_grid_get_DEBUG(_id: any, _x: any, _y: any, ): any;
declare function ds_grid_get_RELEASE(_id: any, _x: any, _y: any, ): any;
declare function ds_grid_get_common(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function ds_grid_get_sum(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function ds_grid_get_max(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function ds_grid_get_min(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function ds_grid_get_mean(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, ): any;
declare function ds_grid_get_disk_common(_id: any, _x: any, _y: any, _r: any, ): any;
declare function ds_grid_get_disk_sum(_id: any, _x: any, _y: any, _r: any, ): any;
declare function ds_grid_get_disk_max(_id: any, _x: any, _y: any, _r: any, ): any;
declare function ds_grid_get_disk_min(_id: any, _x: any, _y: any, _r: any, ): any;
declare function ds_grid_get_disk_mean(_id: any, _x: any, _y: any, _r: any, ): any;
declare function ds_grid_value_common(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, _val: any, ): any;
declare function ds_grid_value_exists(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, _val: any, ): any;
declare function ds_grid_value_x(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, _val: any, ): any;
declare function ds_grid_value_y(_id: any, _x1: any, _y1: any, _x2: any, _y2: any, _val: any, ): any;
declare function ds_grid_value_disk_common(_id: any, _x: any, _y: any, _r: any, _val: any, ): any;
declare function ds_grid_value_disk_exists(_id: any, _x: any, _y: any, _r: any, _val: any, ): any;
declare function ds_grid_value_disk_x(_id: any, _x: any, _y: any, _r: any, _val: any, ): any;
declare function ds_grid_value_disk_y(_id: any, _x: any, _y: any, _r: any, _val: any, ): any;
declare function ds_grid_shuffle(_id: any, ): any;
declare function ds_grid_write(_id: any, ): any;
declare function ds_grid_read(_id: any, _pJSON: any, ): any;
declare function ds_grid_sort(_id: any, _column: any, _ascending: any, ): any;
declare function ds_grid_set(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_set_pre(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_set_post(_id: any, _x: any, _y: any, _val: any, ): any;
declare function ds_grid_get(_id: any, _x: any, _y: any, ): any;
declare function ds_list_create(): any;
declare function ds_list_destroy(_id: any, ): any;
declare function ds_list_clear(_id: any, ): any;
declare function ds_list_copy(_id: any, _source: any, ): any;
declare function ds_list_size(_id: any, ): any;
declare function ds_list_empty(_id: any, ): any;
declare function ds_list_add(): any;
declare function ds_list_add_map(_id: any, _val: any, ): any;
declare function ds_list_add_list(_id: any, _val: any, ): any;
declare function ds_list_set(_id: any, _index: any, _val: any, ): any;
declare function ds_list_set_pre(_id: any, _index: any, _val: any, ): any;
declare function ds_list_set_post(_id: any, _index: any, _val: any, ): any;
declare function ds_list_insert(_id: any, _pos: any, _val: any, ): any;
declare function ds_list_insert_map(_id: any, _pos: any, _val: any, ): any;
declare function ds_list_insert_list(_id: any, _pos: any, _val: any, ): any;
declare function ds_list_replace(_id: any, _pos: any, _val: any, ): any;
declare function ds_list_delete(_id: any, _pos: any, ): any;
declare function ds_list_find_index(_id: any, _val: any, ): any;
declare function ds_list_find_value(_id: any, _pos: any, ): any;
declare function ds_list_is_list(_id: any, _pos: any, ): any;
declare function ds_list_is_map(_id: any, _pos: any, ): any;
declare function ds_list_sort(_id: any, _ascend: any, ): any;
declare function ds_list_shuffle(_id: any, ): any;
declare function ds_list_write(_id: any, ): any;
declare function ds_list_read(_id: any, _pJSON: any, ): any;
declare function ds_list_mark_as_map(_id: any, _pos: any, ): any;
declare function ds_list_mark_as_list(_id: any, _pos: any, ): any;
declare function UniqueId(): any;
declare function yy_MapListContainer(_type: any, _obj: any, ): any;
declare function yy_getHash(_v: any, ): any;
declare function ds_map_create(): any;
declare function ds_map_destroy(_id: any, ): any;
declare function ds_map_clear(_id: any, ): any;
declare function ds_map_destroy_children(_pMap: any, ): any;
declare function ds_map_copy(_dest: any, _source: any, ): any;
declare function ds_map_size(_id: any, ): any;
declare function ds_map_empty(_id: any, ): any;
declare function ds_map_replace(_id: any, _key: any, _val: any, ): any;
declare function ds_map_replace_map(_id: any, _key: any, _val: any, ): any;
declare function ds_map_replace_list(_id: any, _key: any, _val: any, ): any;
declare function ds_map_delete(_id: any, _key: any, ): any;
declare function ds_map_exists(_id: any, _key: any, ): any;
declare function ds_map_add(_id: any, _key: any, _val: any, ): any;
declare function ds_map_add_map(_id: any, _key: any, _val: any, ): any;
declare function ds_map_add_list(_id: any, _key: any, _val: any, ): any;
declare function ds_map_set(_id: any, _key: any, _val: any, ): any;
declare function ds_map_set_pre(_id: any, _key: any, _val: any, ): any;
declare function ds_map_set_post(_id: any, _key: any, _val: any, ): any;
declare function ds_map_find_value(_id: any, _key: any, ): any;
declare function ds_map_values_to_array(_id: any, _array: any, ): any;
declare function ds_map_keys_to_array(_id: any, _array: any, ): any;
declare function ds_map_is_map(_id: any, _key: any, ): any;
declare function ds_map_is_list(_id: any, _key: any, ): any;
declare function ds_map_find_previous(_id: any, _key: any, ): any;
declare function ds_map_find_next(_id: any, _key: any, ): any;
declare function ds_map_find_first(_id: any, ): any;
declare function ds_map_find_last(_id: any, ): any;
declare function ds_map_write(_id: any, ): any;
declare function ds_map_read(_id: any, _pJSON: any, ): any;
declare function ds_map_secure_save(_id: any, _filename: any, ): any;
declare function ds_map_secure_load_buffer(_buffer: any, ): any;
declare function ds_map_secure_save_buffer(_map: any, _buffer: any, ): any;
declare function ds_map_secure_load(_filename: any, ): any;
declare function getDeviceIdentifier(): any;
declare function getEncryptedUDID(): any;
declare function yyPriorityQueue_Save(_depth: any, _obj: any, ): any;
declare function yyPriorityQueue_Item(_depth: any, _obj: any, ): any;
declare function ds_priority_create(): any;
declare function ds_priority_destroy(_id: any, ): any;
declare function ds_priority_clear(_id: any, ): any;
declare function ds_priority_copy(_id: any, _source: any, ): any;
declare function ds_priority_size(_id: any, ): any;
declare function ds_priority_empty(_id: any, ): any;
declare function ds_priority_add(_id: any, _val: any, _prio: any, ): any;
declare function ds_priority_change_priority(_id: any, _val: any, _prio: any, ): any;
declare function ds_priority_find_priority(_id: any, _val: any, ): any;
declare function ds_priority_delete_value(_id: any, _val: any, ): any;
declare function ds_priority_delete_min(_id: any, ): any;
declare function ds_priority_find_min(_id: any, ): any;
declare function ds_priority_delete_max(_id: any, ): any;
declare function ds_priority_find_max(_id: any, ): any;
declare function ds_priority_write(_id: any, ): any;
declare function ds_priority_read(_id: any, _pJSON: any, ): any;
declare function ds_queue_create(): any;
declare function ds_queue_destroy(_id: any, ): any;
declare function ds_queue_clear(_id: any, ): any;
declare function ds_queue_copy(_dest: any, _source: any, ): any;
declare function ds_queue_size(_id: any, ): any;
declare function ds_queue_empty(_id: any, ): any;
declare function ds_queue_enqueue(): any;
declare function ds_queue_dequeue(_id: any, ): any;
declare function ds_queue_head(_id: any, ): any;
declare function ds_queue_tail(_id: any, ): any;
declare function ds_queue_write(_id: any, ): any;
declare function ds_queue_read(_id: any, _pJSON: any, ): any;
declare function ds_stack_create(): any;
declare function ds_stack_destroy(_id: any, ): any;
declare function ds_stack_clear(_id: any, ): any;
declare function ds_stack_copy(_id: any, _source: any, ): any;
declare function ds_stack_size(_id: any, ): any;
declare function ds_stack_empty(_id: any, ): any;
declare function ds_stack_push(_id: any, _val: any, ): any;
declare function ds_stack_pop(_id: any, ): any;
declare function ds_stack_top(_id: any, ): any;
declare function ds_stack_write(_id: any, ): any;
declare function ds_stack_read(_id: any, _pJSON: any, ): any;
